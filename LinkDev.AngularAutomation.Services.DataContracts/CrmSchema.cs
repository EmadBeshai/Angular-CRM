//         Project / File: LinkDev.AngularAutomation.Services.DataContracts / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace LinkDev.AngularAutomation.Services.DataContracts
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="Account"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Account> AccountSet
		{
			get
			{
				return this.CreateQuery<Account>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Contact"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Contact> ContactSet
		{
			get
			{
				return this.CreateQuery<Contact>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Case"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Case> CaseSet
		{
			get
			{
				return this.CreateQuery<Case>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	[KnownType(typeof(AccountContract)),
		KnownType(typeof(ContactContract)),
		KnownType(typeof(CaseContract))]
	public partial class EntityContract
	{
	}

	#endregion

	#region Entities

	#region Account

	/// <summary>
	/// 'Account'.<br />
	/// Business that represents a customer or potential customer. The company that is billed in business transactions.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("account")]
	public partial class Account : GeneratedEntity<Account.RelationName>
	{
		
		public Account() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Account";
		public const string SchemaName = "Account";
		public const string EntityLogicalName = "account";
		public const int EntityTypeCode = 1;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Label/value pairs

		#region Category

		public enum CategoryEnum
		{
			[EnumMember]PreferredCustomer = 1,
			[EnumMember]Standard = 2,
		}

		#endregion
	
		#region Classification

		public enum ClassificationEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region AccountRating

		public enum AccountRatingEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]BillTo = 1,
			[EnumMember]ShipTo = 2,
			[EnumMember]Primary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region Address1FreightTerms

		public enum Address1FreightTermsEnum
		{
			[EnumMember]FOB = 1,
			[EnumMember]NoCharge = 2,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]Airborne = 1,
			[EnumMember]DHL = 2,
			[EnumMember]FedEx = 3,
			[EnumMember]UPS = 4,
			[EnumMember]PostalMail = 5,
			[EnumMember]FullLoad = 6,
			[EnumMember]WillCall = 7,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2FreightTerms

		public enum Address2FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region BusinessType

		public enum BusinessTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region CreditHold

		public enum CreditHoldEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CustomerSize

		public enum CustomerSizeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region RelationshipType

		public enum RelationshipTypeEnum
		{
			[EnumMember]Competitor = 1,
			[EnumMember]Consultant = 2,
			[EnumMember]Customer = 3,
			[EnumMember]Investor = 4,
			[EnumMember]Partner = 5,
			[EnumMember]Influencer = 6,
			[EnumMember]Press = 7,
			[EnumMember]Prospect = 8,
			[EnumMember]Reseller = 9,
			[EnumMember]Supplier = 10,
			[EnumMember]Vendor = 11,
			[EnumMember]Other = 12,
		}

		#endregion
	
		#region DonotallowBulkEmails

		public enum DonotallowBulkEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowBulkMails

		public enum DonotallowBulkMailsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowMails

		public enum DonotallowMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region SendMarketingMaterials

		public enum SendMarketingMaterialsEnum
		{
			[EnumMember]DoNotSend = 1,
			[EnumMember]Send = 0,
		}

		#endregion
	
		#region FollowEmailActivity

		public enum FollowEmailActivityEnum
		{
			[EnumMember]Allow = 1,
			[EnumMember]DoNotAllow = 0,
		}

		#endregion
	
		#region Industry

		public enum IndustryEnum
		{
			[EnumMember]Accounting = 1,
			[EnumMember]AgricultureandNonpetrolNaturalResourceExtraction = 2,
			[EnumMember]BroadcastingPrintingandPublishing = 3,
			[EnumMember]Brokers = 4,
			[EnumMember]BuildingSupplyRetail = 5,
			[EnumMember]BusinessServices = 6,
			[EnumMember]Consulting = 7,
			[EnumMember]ConsumerServices = 8,
			[EnumMember]DesignDirectionandCreativeManagement = 9,
			[EnumMember]DistributorsDispatchersandProcessors = 10,
			[EnumMember]DoctorsOfficesandClinics = 11,
			[EnumMember]DurableManufacturing = 12,
			[EnumMember]EatingandDrinkingPlaces = 13,
			[EnumMember]EntertainmentRetail = 14,
			[EnumMember]EquipmentRentalandLeasing = 15,
			[EnumMember]Financial = 16,
			[EnumMember]FoodandTobaccoProcessing = 17,
			[EnumMember]InboundCapitalIntensiveProcessing = 18,
			[EnumMember]InboundRepairandServices = 19,
			[EnumMember]Insurance = 20,
			[EnumMember]LegalServices = 21,
			[EnumMember]NonDurableMerchandiseRetail = 22,
			[EnumMember]OutboundConsumerService = 23,
			[EnumMember]PetrochemicalExtractionandDistribution = 24,
			[EnumMember]ServiceRetail = 25,
			[EnumMember]SIGAffiliations = 26,
			[EnumMember]SocialServices = 27,
			[EnumMember]SpecialOutboundTradeContractors = 28,
			[EnumMember]SpecialtyRealty = 29,
			[EnumMember]Transportation = 30,
			[EnumMember]UtilityCreationandDistribution = 31,
			[EnumMember]VehicleRetail = 32,
			[EnumMember]Wholesale = 33,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region MarketingOnly

		public enum MarketingOnlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Merged

		public enum MergedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region TaxExempt

		public enum TaxExemptEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region TravelChargeType

		public enum TravelChargeTypeEnum
		{
			[EnumMember]Hourly = 690970000,
			[EnumMember]Mileage = 690970001,
			[EnumMember]Fixed = 690970002,
			[EnumMember]None = 690970003,
		}

		#endregion
	
		#region Ownership

		public enum OwnershipEnum
		{
			[EnumMember]Public = 1,
			[EnumMember]Private = 2,
			[EnumMember]Subsidiary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region ParticipatesinWorkflow

		public enum ParticipatesinWorkflowEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PaymentTerms

		public enum PaymentTermsEnum
		{
			[EnumMember]Net30 = 1,
			[EnumMember]_210Net30 = 2,
			[EnumMember]Net45 = 3,
			[EnumMember]Net60 = 4,
		}

		#endregion
	
		#region PreferredDay

		public enum PreferredDayEnum
		{
			[EnumMember]Sunday = 0,
			[EnumMember]Monday = 1,
			[EnumMember]Tuesday = 2,
			[EnumMember]Wednesday = 3,
			[EnumMember]Thursday = 4,
			[EnumMember]Friday = 5,
			[EnumMember]Saturday = 6,
		}

		#endregion
	
		#region PreferredTime

		public enum PreferredTimeEnum
		{
			[EnumMember]Morning = 1,
			[EnumMember]Afternoon = 2,
			[EnumMember]Evening = 3,
		}

		#endregion
	
		#region PreferredMethodofContact

		public enum PreferredMethodofContactEnum
		{
			[EnumMember]Any = 1,
			[EnumMember]Email = 2,
			[EnumMember]Phone = 3,
			[EnumMember]Fax = 4,
			[EnumMember]Mail = 5,
		}

		#endregion
	
		#region ShippingMethod

		public enum ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#region TerritoryCode

		public enum TerritoryCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Category = "accountcategorycode";
				public const string Classification = "accountclassificationcode";
				public const string AccountRating = "accountratingcode";
				public const string Address1AddressType = "address1_addresstypecode";
				public const string Address1FreightTerms = "address1_freighttermscode";
				public const string Address1ShippingMethod = "address1_shippingmethodcode";
				public const string Address2AddressType = "address2_addresstypecode";
				public const string Address2FreightTerms = "address2_freighttermscode";
				public const string Address2ShippingMethod = "address2_shippingmethodcode";
				public const string BusinessType = "businesstypecode";
				public const string CreditHold = "creditonhold";
				public const string CustomerSize = "customersizecode";
				public const string RelationshipType = "customertypecode";
				public const string DonotallowBulkEmails = "donotbulkemail";
				public const string DonotallowBulkMails = "donotbulkpostalmail";
				public const string DonotallowEmails = "donotemail";
				public const string DonotallowFaxes = "donotfax";
				public const string DonotallowPhoneCalls = "donotphone";
				public const string DonotallowMails = "donotpostalmail";
				public const string SendMarketingMaterials = "donotsendmm";
				public const string FollowEmailActivity = "followemail";
				public const string Industry = "industrycode";
				public const string IsPrivate = "isprivate";
				public const string MarketingOnly = "marketingonly";
				public const string Merged = "merged";
				public const string TaxExempt = "msdyn_taxexempt";
				public const string TravelChargeType = "msdyn_travelchargetype";
				public const string Ownership = "ownershipcode";
				public const string ParticipatesinWorkflow = "participatesinworkflow";
				public const string PaymentTerms = "paymenttermscode";
				public const string PreferredDay = "preferredappointmentdaycode";
				public const string PreferredTime = "preferredappointmenttimecode";
				public const string PreferredMethodofContact = "preferredcontactmethodcode";
				public const string ShippingMethod = "shippingmethodcode";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TerritoryCode = "territorycode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Category 
				{
					public const string PreferredCustomer_1033 = "Preferred Customer";
					public const string Standard_1033 = "Standard";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Category), label, languageCode);
					}
				}

				public static class Classification 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Classification), label, languageCode);
					}
				}

				public static class AccountRating 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AccountRating), label, languageCode);
					}
				}

				public static class Address1AddressType 
				{
					public const string BillTo_1033 = "Bill To";
					public const string ShipTo_1033 = "Ship To";
					public const string Primary_1033 = "Primary";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1AddressType), label, languageCode);
					}
				}

				public static class Address1FreightTerms 
				{
					public const string FOB_1033 = "FOB";
					public const string NoCharge_1033 = "No Charge";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1FreightTerms), label, languageCode);
					}
				}

				public static class Address1ShippingMethod 
				{
					public const string Airborne_1033 = "Airborne";
					public const string DHL_1033 = "DHL";
					public const string FedEx_1033 = "FedEx";
					public const string UPS_1033 = "UPS";
					public const string PostalMail_1033 = "Postal Mail";
					public const string FullLoad_1033 = "Full Load";
					public const string WillCall_1033 = "Will Call";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1ShippingMethod), label, languageCode);
					}
				}

				public static class Address2AddressType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2AddressType), label, languageCode);
					}
				}

				public static class Address2FreightTerms 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2FreightTerms), label, languageCode);
					}
				}

				public static class Address2ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2ShippingMethod), label, languageCode);
					}
				}

				public static class BusinessType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(BusinessType), label, languageCode);
					}
				}

				public static class CreditHold 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CreditHold), label, languageCode);
					}
				}

				public static class CustomerSize 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerSize), label, languageCode);
					}
				}

				public static class RelationshipType 
				{
					public const string Competitor_1033 = "Competitor";
					public const string Consultant_1033 = "Consultant";
					public const string Customer_1033 = "Customer";
					public const string Investor_1033 = "Investor";
					public const string Partner_1033 = "Partner";
					public const string Influencer_1033 = "Influencer";
					public const string Press_1033 = "Press";
					public const string Prospect_1033 = "Prospect";
					public const string Reseller_1033 = "Reseller";
					public const string Supplier_1033 = "Supplier";
					public const string Vendor_1033 = "Vendor";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RelationshipType), label, languageCode);
					}
				}

				public static class DonotallowBulkEmails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowBulkEmails), label, languageCode);
					}
				}

				public static class DonotallowBulkMails 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowBulkMails), label, languageCode);
					}
				}

				public static class DonotallowEmails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowEmails), label, languageCode);
					}
				}

				public static class DonotallowFaxes 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowFaxes), label, languageCode);
					}
				}

				public static class DonotallowPhoneCalls 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowPhoneCalls), label, languageCode);
					}
				}

				public static class DonotallowMails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowMails), label, languageCode);
					}
				}

				public static class SendMarketingMaterials 
				{
					public const string DoNotSend_1033 = "Do Not Send";
					public const string Send_1033 = "Send";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SendMarketingMaterials), label, languageCode);
					}
				}

				public static class FollowEmailActivity 
				{
					public const string Allow_1033 = "Allow";
					public const string DoNotAllow_1033 = "Do Not Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FollowEmailActivity), label, languageCode);
					}
				}

				public static class Industry 
				{
					public const string Accounting_1033 = "Accounting";
					public const string AgricultureandNonpetrolNaturalResourceExtraction_1033 = "Agriculture and Non-petrol Natural Resource Extraction";
					public const string BroadcastingPrintingandPublishing_1033 = "Broadcasting Printing and Publishing";
					public const string Brokers_1033 = "Brokers";
					public const string BuildingSupplyRetail_1033 = "Building Supply Retail";
					public const string BusinessServices_1033 = "Business Services";
					public const string Consulting_1033 = "Consulting";
					public const string ConsumerServices_1033 = "Consumer Services";
					public const string DesignDirectionandCreativeManagement_1033 = "Design, Direction and Creative Management";
					public const string DistributorsDispatchersandProcessors_1033 = "Distributors, Dispatchers and Processors";
					public const string DoctorsOfficesandClinics_1033 = "Doctor\'s Offices and Clinics";
					public const string DurableManufacturing_1033 = "Durable Manufacturing";
					public const string EatingandDrinkingPlaces_1033 = "Eating and Drinking Places";
					public const string EntertainmentRetail_1033 = "Entertainment Retail";
					public const string EquipmentRentalandLeasing_1033 = "Equipment Rental and Leasing";
					public const string Financial_1033 = "Financial";
					public const string FoodandTobaccoProcessing_1033 = "Food and Tobacco Processing";
					public const string InboundCapitalIntensiveProcessing_1033 = "Inbound Capital Intensive Processing";
					public const string InboundRepairandServices_1033 = "Inbound Repair and Services";
					public const string Insurance_1033 = "Insurance";
					public const string LegalServices_1033 = "Legal Services";
					public const string NonDurableMerchandiseRetail_1033 = "Non-Durable Merchandise Retail";
					public const string OutboundConsumerService_1033 = "Outbound Consumer Service";
					public const string PetrochemicalExtractionandDistribution_1033 = "Petrochemical Extraction and Distribution";
					public const string ServiceRetail_1033 = "Service Retail";
					public const string SIGAffiliations_1033 = "SIG Affiliations";
					public const string SocialServices_1033 = "Social Services";
					public const string SpecialOutboundTradeContractors_1033 = "Special Outbound Trade Contractors";
					public const string SpecialtyRealty_1033 = "Specialty Realty";
					public const string Transportation_1033 = "Transportation";
					public const string UtilityCreationandDistribution_1033 = "Utility Creation and Distribution";
					public const string VehicleRetail_1033 = "Vehicle Retail";
					public const string Wholesale_1033 = "Wholesale";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Industry), label, languageCode);
					}
				}

				public static class IsPrivate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPrivate), label, languageCode);
					}
				}

				public static class MarketingOnly 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(MarketingOnly), label, languageCode);
					}
				}

				public static class Merged 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Merged), label, languageCode);
					}
				}

				public static class TaxExempt 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(TaxExempt), label, languageCode);
					}
				}

				public static class TravelChargeType 
				{
					public const string Hourly_1033 = "Hourly";
					public const string Mileage_1033 = "Mileage";
					public const string Fixed_1033 = "Fixed";
					public const string None_1033 = "None";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(TravelChargeType), label, languageCode);
					}
				}

				public static class Ownership 
				{
					public const string Public_1033 = "Public";
					public const string Private_1033 = "Private";
					public const string Subsidiary_1033 = "Subsidiary";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Ownership), label, languageCode);
					}
				}

				public static class ParticipatesinWorkflow 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ParticipatesinWorkflow), label, languageCode);
					}
				}

				public static class PaymentTerms 
				{
					public const string Net30_1033 = "Net 30";
					public const string _210Net30_1033 = "2% 10, Net 30";
					public const string Net45_1033 = "Net 45";
					public const string Net60_1033 = "Net 60";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PaymentTerms), label, languageCode);
					}
				}

				public static class PreferredDay 
				{
					public const string Sunday_1033 = "Sunday";
					public const string Monday_1033 = "Monday";
					public const string Tuesday_1033 = "Tuesday";
					public const string Wednesday_1033 = "Wednesday";
					public const string Thursday_1033 = "Thursday";
					public const string Friday_1033 = "Friday";
					public const string Saturday_1033 = "Saturday";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredDay), label, languageCode);
					}
				}

				public static class PreferredTime 
				{
					public const string Morning_1033 = "Morning";
					public const string Afternoon_1033 = "Afternoon";
					public const string Evening_1033 = "Evening";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredTime), label, languageCode);
					}
				}

				public static class PreferredMethodofContact 
				{
					public const string Any_1033 = "Any";
					public const string Email_1033 = "Email";
					public const string Phone_1033 = "Phone";
					public const string Fax_1033 = "Fax";
					public const string Mail_1033 = "Mail";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredMethodofContact), label, languageCode);
					}
				}

				public static class ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShippingMethod), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

				public static class TerritoryCode 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(TerritoryCode), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Category = "accountcategorycode";
			public const string Classification = "accountclassificationcode";
			public const string AccountId = "accountid";
			public const string AccountNumber = "accountnumber";
			public const string AccountRating = "accountratingcode";
			public const string Address1ID = "address1_addressid";
			public const string Address1AddressType = "address1_addresstypecode";
			public const string Address1City = "address1_city";
			public const string Address1 = "address1_composite";
			public const string Address1CountryRegion = "address1_country";
			public const string Address1County = "address1_county";
			public const string Address1Fax = "address1_fax";
			public const string Address1FreightTerms = "address1_freighttermscode";
			public const string Address1Latitude = "address1_latitude";
			public const string Address1Street1 = "address1_line1";
			public const string Address1Street2 = "address1_line2";
			public const string Address1Street3 = "address1_line3";
			public const string Address1Longitude = "address1_longitude";
			public const string Address1Name = "address1_name";
			public const string Address1ZIPPostalCode = "address1_postalcode";
			public const string Address1PostOfficeBox = "address1_postofficebox";
			public const string Address1PrimaryContactName = "address1_primarycontactname";
			public const string Address1ShippingMethod = "address1_shippingmethodcode";
			public const string Address1StateProvince = "address1_stateorprovince";
			public const string AddressPhone = "address1_telephone1";
			public const string Address1Telephone2 = "address1_telephone2";
			public const string Address1Telephone3 = "address1_telephone3";
			public const string Address1UPSZone = "address1_upszone";
			public const string Address1UTCOffset = "address1_utcoffset";
			public const string Address2ID = "address2_addressid";
			public const string Address2AddressType = "address2_addresstypecode";
			public const string Address2City = "address2_city";
			public const string Address2 = "address2_composite";
			public const string Address2CountryRegion = "address2_country";
			public const string Address2County = "address2_county";
			public const string Address2Fax = "address2_fax";
			public const string Address2FreightTerms = "address2_freighttermscode";
			public const string Address2Latitude = "address2_latitude";
			public const string Address2Street1 = "address2_line1";
			public const string Address2Street2 = "address2_line2";
			public const string Address2Street3 = "address2_line3";
			public const string Address2Longitude = "address2_longitude";
			public const string Address2Name = "address2_name";
			public const string Address2ZIPPostalCode = "address2_postalcode";
			public const string Address2PostOfficeBox = "address2_postofficebox";
			public const string Address2PrimaryContactName = "address2_primarycontactname";
			public const string Address2ShippingMethod = "address2_shippingmethodcode";
			public const string Address2StateProvince = "address2_stateorprovince";
			public const string Address2Telephone1 = "address2_telephone1";
			public const string Address2Telephone2 = "address2_telephone2";
			public const string Address2Telephone3 = "address2_telephone3";
			public const string Address2UPSZone = "address2_upszone";
			public const string Address2UTCOffset = "address2_utcoffset";
			public const string Aging30 = "aging30";
			public const string Aging30Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90Base = "aging90_base";
			public const string BusinessType = "businesstypecode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimitBase = "creditlimit_base";
			public const string CreditHold = "creditonhold";
			public const string CustomerSize = "customersizecode";
			public const string RelationshipType = "customertypecode";
			public const string ProductPriceList = "defaultpricelevelid";
			public const string Description = "description";
			public const string DonotallowBulkEmails = "donotbulkemail";
			public const string DonotallowBulkMails = "donotbulkpostalmail";
			public const string DonotallowEmails = "donotemail";
			public const string DonotallowFaxes = "donotfax";
			public const string DonotallowPhoneCalls = "donotphone";
			public const string DonotallowMails = "donotpostalmail";
			public const string SendMarketingMaterials = "donotsendmm";
			public const string Email = "emailaddress1";
			public const string EmailAddress2 = "emailaddress2";
			public const string EmailAddress3 = "emailaddress3";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FollowEmailActivity = "followemail";
			public const string FTPSite = "ftpsiteurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Industry = "industrycode";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastDateIncludedinCampaign = "lastusedincampaign";
			public const string MarketCapitalization = "marketcap";
			public const string MarketCapitalizationBase = "marketcap_base";
			public const string MarketingOnly = "marketingonly";
			public const string MasterID = "masterid";
			public const string Merged = "merged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string BillingAccount = "msdyn_billingaccount";
			public const string ExternalID = "msdyn_externalaccountid";
			public const string PreferredResourceDeprecated = "msdyn_preferredresource";
			public const string SalesTaxCode = "msdyn_salestaxcode";
			public const string ServiceTerritory = "msdyn_serviceterritory";
			public const string TaxExempt = "msdyn_taxexempt";
			public const string TaxExemptNumber = "msdyn_taxexemptnumber";
			public const string TravelCharge = "msdyn_travelcharge";
			public const string TravelChargeBase = "msdyn_travelcharge_base";
			public const string TravelChargeType = "msdyn_travelchargetype";
			public const string WorkHourTemplate = "msdyn_workhourtemplate";
			public const string WorkOrderInstructions = "msdyn_workorderinstructions";
			public const string AccountName = "name";
			public const string NumberofEmployees = "numberofemployees";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string OpenDeals = "opendeals";
			public const string OpenDealsLastUpdatedOn = "opendeals_date";
			public const string OpenDealsState = "opendeals_state";
			public const string OpenRevenue = "openrevenue";
			public const string OpenRevenueBase = "openrevenue_base";
			public const string OpenRevenueLastUpdatedOn = "openrevenue_date";
			public const string OpenRevenueState = "openrevenue_state";
			public const string OriginatingLead = "originatingleadid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string Ownership = "ownershipcode";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentAccount = "parentaccountid";
			public const string ParticipatesinWorkflow = "participatesinworkflow";
			public const string PaymentTerms = "paymenttermscode";
			public const string PreferredDay = "preferredappointmentdaycode";
			public const string PreferredTime = "preferredappointmenttimecode";
			public const string PreferredMethodofContact = "preferredcontactmethodcode";
			public const string PreferredFacilityEquipment = "preferredequipmentid";
			public const string PreferredService = "preferredserviceid";
			public const string PreferredUser = "preferredsystemuserid";
			public const string PrimaryContact = "primarycontactid";
			public const string PrimarySatoriID = "primarysatoriid";
			public const string PrimaryTwitterID = "primarytwitterid";
			public const string Process = "processid";
			public const string AnnualRevenue = "revenue";
			public const string AnnualRevenueBase = "revenue_base";
			public const string SharesOutstanding = "sharesoutstanding";
			public const string ShippingMethod = "shippingmethodcode";
			public const string SICCode = "sic";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string __DeprecatedProcessStage = "stageid";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string StockExchange = "stockexchange";
			public const string TeamsFollowed = "teamsfollowed";
			public const string MainPhone = "telephone1";
			public const string OtherPhone = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TerritoryCode = "territorycode";
			public const string Territory = "territoryid";
			public const string TickerSymbol = "tickersymbol";
			public const string TimeSpentbyme = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string Website = "websiteurl";
			public const string YomiAccountName = "yominame";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string Category = "AccountCategoryCode";
				public const string Classification = "AccountClassificationCode";
				public const string AccountId = "AccountId";
				public const string AccountNumber = "AccountNumber";
				public const string AccountRating = "AccountRatingCode";
				public const string Address1ID = "Address1_AddressId";
				public const string Address1AddressType = "Address1_AddressTypeCode";
				public const string Address1City = "Address1_City";
				public const string Address1 = "Address1_Composite";
				public const string Address1CountryRegion = "Address1_Country";
				public const string Address1County = "Address1_County";
				public const string Address1Fax = "Address1_Fax";
				public const string Address1FreightTerms = "Address1_FreightTermsCode";
				public const string Address1Latitude = "Address1_Latitude";
				public const string Address1Street1 = "Address1_Line1";
				public const string Address1Street2 = "Address1_Line2";
				public const string Address1Street3 = "Address1_Line3";
				public const string Address1Longitude = "Address1_Longitude";
				public const string Address1Name = "Address1_Name";
				public const string Address1ZIPPostalCode = "Address1_PostalCode";
				public const string Address1PostOfficeBox = "Address1_PostOfficeBox";
				public const string Address1PrimaryContactName = "Address1_PrimaryContactName";
				public const string Address1ShippingMethod = "Address1_ShippingMethodCode";
				public const string Address1StateProvince = "Address1_StateOrProvince";
				public const string AddressPhone = "Address1_Telephone1";
				public const string Address1Telephone2 = "Address1_Telephone2";
				public const string Address1Telephone3 = "Address1_Telephone3";
				public const string Address1UPSZone = "Address1_UPSZone";
				public const string Address1UTCOffset = "Address1_UTCOffset";
				public const string Address2ID = "Address2_AddressId";
				public const string Address2AddressType = "Address2_AddressTypeCode";
				public const string Address2City = "Address2_City";
				public const string Address2 = "Address2_Composite";
				public const string Address2CountryRegion = "Address2_Country";
				public const string Address2County = "Address2_County";
				public const string Address2Fax = "Address2_Fax";
				public const string Address2FreightTerms = "Address2_FreightTermsCode";
				public const string Address2Latitude = "Address2_Latitude";
				public const string Address2Street1 = "Address2_Line1";
				public const string Address2Street2 = "Address2_Line2";
				public const string Address2Street3 = "Address2_Line3";
				public const string Address2Longitude = "Address2_Longitude";
				public const string Address2Name = "Address2_Name";
				public const string Address2ZIPPostalCode = "Address2_PostalCode";
				public const string Address2PostOfficeBox = "Address2_PostOfficeBox";
				public const string Address2PrimaryContactName = "Address2_PrimaryContactName";
				public const string Address2ShippingMethod = "Address2_ShippingMethodCode";
				public const string Address2StateProvince = "Address2_StateOrProvince";
				public const string Address2Telephone1 = "Address2_Telephone1";
				public const string Address2Telephone2 = "Address2_Telephone2";
				public const string Address2Telephone3 = "Address2_Telephone3";
				public const string Address2UPSZone = "Address2_UPSZone";
				public const string Address2UTCOffset = "Address2_UTCOffset";
				public const string Aging30 = "Aging30";
				public const string Aging30Base = "Aging30_Base";
				public const string Aging60 = "Aging60";
				public const string Aging60Base = "Aging60_Base";
				public const string Aging90 = "Aging90";
				public const string Aging90Base = "Aging90_Base";
				public const string BusinessType = "BusinessTypeCode";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedByExternalParty = "CreatedByExternalParty";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string CreditLimit = "CreditLimit";
				public const string CreditLimitBase = "CreditLimit_Base";
				public const string CreditHold = "CreditOnHold";
				public const string CustomerSize = "CustomerSizeCode";
				public const string RelationshipType = "CustomerTypeCode";
				public const string ProductPriceList = "DefaultPriceLevelId";
				public const string Description = "Description";
				public const string DonotallowBulkEmails = "DoNotBulkEMail";
				public const string DonotallowBulkMails = "DoNotBulkPostalMail";
				public const string DonotallowEmails = "DoNotEMail";
				public const string DonotallowFaxes = "DoNotFax";
				public const string DonotallowPhoneCalls = "DoNotPhone";
				public const string DonotallowMails = "DoNotPostalMail";
				public const string SendMarketingMaterials = "DoNotSendMM";
				public const string Email = "EMailAddress1";
				public const string EmailAddress2 = "EMailAddress2";
				public const string EmailAddress3 = "EMailAddress3";
				public const string EntityImageId = "EntityImageId";
				public const string ExchangeRate = "ExchangeRate";
				public const string Fax = "Fax";
				public const string FollowEmailActivity = "FollowEmail";
				public const string FTPSite = "FtpSiteURL";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string Industry = "IndustryCode";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string LastDateIncludedinCampaign = "LastUsedInCampaign";
				public const string MarketCapitalization = "MarketCap";
				public const string MarketCapitalizationBase = "MarketCap_Base";
				public const string MarketingOnly = "MarketingOnly";
				public const string MasterID = "MasterId";
				public const string Merged = "Merged";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedByExternalParty = "ModifiedByExternalParty";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string BillingAccount = "msdyn_BillingAccount";
				public const string ExternalID = "msdyn_externalaccountid";
				public const string PreferredResourceDeprecated = "msdyn_PreferredResource";
				public const string SalesTaxCode = "msdyn_SalesTaxCode";
				public const string ServiceTerritory = "msdyn_ServiceTerritory";
				public const string TaxExempt = "msdyn_TaxExempt";
				public const string TaxExemptNumber = "msdyn_TaxExemptNumber";
				public const string TravelCharge = "msdyn_TravelCharge";
				public const string TravelChargeBase = "msdyn_travelcharge_Base";
				public const string TravelChargeType = "msdyn_TravelChargeType";
				public const string WorkHourTemplate = "msdyn_workhourtemplate";
				public const string WorkOrderInstructions = "msdyn_WorkOrderInstructions";
				public const string AccountName = "Name";
				public const string NumberofEmployees = "NumberOfEmployees";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string OpenDeals = "OpenDeals";
				public const string OpenDealsLastUpdatedOn = "OpenDeals_Date";
				public const string OpenDealsState = "OpenDeals_State";
				public const string OpenRevenue = "OpenRevenue";
				public const string OpenRevenueBase = "OpenRevenue_Base";
				public const string OpenRevenueLastUpdatedOn = "OpenRevenue_Date";
				public const string OpenRevenueState = "OpenRevenue_State";
				public const string OriginatingLead = "OriginatingLeadId";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string Ownership = "OwnershipCode";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string ParentAccount = "ParentAccountId";
				public const string ParticipatesinWorkflow = "ParticipatesInWorkflow";
				public const string PaymentTerms = "PaymentTermsCode";
				public const string PreferredDay = "PreferredAppointmentDayCode";
				public const string PreferredTime = "PreferredAppointmentTimeCode";
				public const string PreferredMethodofContact = "PreferredContactMethodCode";
				public const string PreferredFacilityEquipment = "PreferredEquipmentId";
				public const string PreferredService = "PreferredServiceId";
				public const string PreferredUser = "PreferredSystemUserId";
				public const string PrimaryContact = "PrimaryContactId";
				public const string PrimarySatoriID = "PrimarySatoriId";
				public const string PrimaryTwitterID = "PrimaryTwitterId";
				public const string Process = "ProcessId";
				public const string AnnualRevenue = "Revenue";
				public const string AnnualRevenueBase = "Revenue_Base";
				public const string SharesOutstanding = "SharesOutstanding";
				public const string ShippingMethod = "ShippingMethodCode";
				public const string SICCode = "SIC";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string __DeprecatedProcessStage = "StageId";
				public const string Status = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string StockExchange = "StockExchange";
				public const string TeamsFollowed = "TeamsFollowed";
				public const string MainPhone = "Telephone1";
				public const string OtherPhone = "Telephone2";
				public const string Telephone3 = "Telephone3";
				public const string TerritoryCode = "TerritoryCode";
				public const string Territory = "TerritoryId";
				public const string TickerSymbol = "TickerSymbol";
				public const string TimeSpentbyme = "TimeSpentByMeOnEmailAndMeetings";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Currency = "TransactionCurrencyId";
				public const string __DeprecatedTraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
				public const string Website = "WebSiteURL";
				public const string YomiAccountName = "YomiName";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Category
				{
					public const string _1033 = "Category";
				}

				public static class Classification
				{
					public const string _1033 = "Classification";
				}

				public static class AccountId
				{
					public const string _1033 = "Account";
				}

				public static class AccountNumber
				{
					public const string _1033 = "Account Number";
				}

				public static class AccountRating
				{
					public const string _1033 = "Account Rating";
				}

				public static class Address1ID
				{
					public const string _1033 = "Address 1: ID";
				}

				public static class Address1AddressType
				{
					public const string _1033 = "Address 1: Address Type";
				}

				public static class Address1City
				{
					public const string _1033 = "Address 1: City";
				}

				public static class Address1
				{
					public const string _1033 = "Address 1";
				}

				public static class Address1CountryRegion
				{
					public const string _1033 = "Address 1: Country/Region";
				}

				public static class Address1County
				{
					public const string _1033 = "Address 1: County";
				}

				public static class Address1Fax
				{
					public const string _1033 = "Address 1: Fax";
				}

				public static class Address1FreightTerms
				{
					public const string _1033 = "Address 1: Freight Terms";
				}

				public static class Address1Latitude
				{
					public const string _1033 = "Address 1: Latitude";
				}

				public static class Address1Street1
				{
					public const string _1033 = "Address 1: Street 1";
				}

				public static class Address1Street2
				{
					public const string _1033 = "Address 1: Street 2";
				}

				public static class Address1Street3
				{
					public const string _1033 = "Address 1: Street 3";
				}

				public static class Address1Longitude
				{
					public const string _1033 = "Address 1: Longitude";
				}

				public static class Address1Name
				{
					public const string _1033 = "Address 1: Name";
				}

				public static class Address1ZIPPostalCode
				{
					public const string _1033 = "Address 1: ZIP/Postal Code";
				}

				public static class Address1PostOfficeBox
				{
					public const string _1033 = "Address 1: Post Office Box";
				}

				public static class Address1PrimaryContactName
				{
					public const string _1033 = "Address 1: Primary Contact Name";
				}

				public static class Address1ShippingMethod
				{
					public const string _1033 = "Address 1: Shipping Method";
				}

				public static class Address1StateProvince
				{
					public const string _1033 = "Address 1: State/Province";
				}

				public static class AddressPhone
				{
					public const string _1033 = "Address Phone";
				}

				public static class Address1Telephone2
				{
					public const string _1033 = "Address 1: Telephone 2";
				}

				public static class Address1Telephone3
				{
					public const string _1033 = "Address 1: Telephone 3";
				}

				public static class Address1UPSZone
				{
					public const string _1033 = "Address 1: UPS Zone";
				}

				public static class Address1UTCOffset
				{
					public const string _1033 = "Address 1: UTC Offset";
				}

				public static class Address2ID
				{
					public const string _1033 = "Address 2: ID";
				}

				public static class Address2AddressType
				{
					public const string _1033 = "Address 2: Address Type";
				}

				public static class Address2City
				{
					public const string _1033 = "Address 2: City";
				}

				public static class Address2
				{
					public const string _1033 = "Address 2";
				}

				public static class Address2CountryRegion
				{
					public const string _1033 = "Address 2: Country/Region";
				}

				public static class Address2County
				{
					public const string _1033 = "Address 2: County";
				}

				public static class Address2Fax
				{
					public const string _1033 = "Address 2: Fax";
				}

				public static class Address2FreightTerms
				{
					public const string _1033 = "Address 2: Freight Terms";
				}

				public static class Address2Latitude
				{
					public const string _1033 = "Address 2: Latitude";
				}

				public static class Address2Street1
				{
					public const string _1033 = "Address 2: Street 1";
				}

				public static class Address2Street2
				{
					public const string _1033 = "Address 2: Street 2";
				}

				public static class Address2Street3
				{
					public const string _1033 = "Address 2: Street 3";
				}

				public static class Address2Longitude
				{
					public const string _1033 = "Address 2: Longitude";
				}

				public static class Address2Name
				{
					public const string _1033 = "Address 2: Name";
				}

				public static class Address2ZIPPostalCode
				{
					public const string _1033 = "Address 2: ZIP/Postal Code";
				}

				public static class Address2PostOfficeBox
				{
					public const string _1033 = "Address 2: Post Office Box";
				}

				public static class Address2PrimaryContactName
				{
					public const string _1033 = "Address 2: Primary Contact Name";
				}

				public static class Address2ShippingMethod
				{
					public const string _1033 = "Address 2: Shipping Method";
				}

				public static class Address2StateProvince
				{
					public const string _1033 = "Address 2: State/Province";
				}

				public static class Address2Telephone1
				{
					public const string _1033 = "Address 2: Telephone 1";
				}

				public static class Address2Telephone2
				{
					public const string _1033 = "Address 2: Telephone 2";
				}

				public static class Address2Telephone3
				{
					public const string _1033 = "Address 2: Telephone 3";
				}

				public static class Address2UPSZone
				{
					public const string _1033 = "Address 2: UPS Zone";
				}

				public static class Address2UTCOffset
				{
					public const string _1033 = "Address 2: UTC Offset";
				}

				public static class Aging30
				{
					public const string _1033 = "Aging 30";
				}

				public static class Aging30Base
				{
					public const string _1033 = "Aging 30 (Base)";
				}

				public static class Aging60
				{
					public const string _1033 = "Aging 60";
				}

				public static class Aging60Base
				{
					public const string _1033 = "Aging 60 (Base)";
				}

				public static class Aging90
				{
					public const string _1033 = "Aging 90";
				}

				public static class Aging90Base
				{
					public const string _1033 = "Aging 90 (Base)";
				}

				public static class BusinessType
				{
					public const string _1033 = "Business Type";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedByExternalParty
				{
					public const string _1033 = "Created By (External Party)";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CreditLimit
				{
					public const string _1033 = "Credit Limit";
				}

				public static class CreditLimitBase
				{
					public const string _1033 = "Credit Limit (Base)";
				}

				public static class CreditHold
				{
					public const string _1033 = "Credit Hold";
				}

				public static class CustomerSize
				{
					public const string _1033 = "Customer Size";
				}

				public static class RelationshipType
				{
					public const string _1033 = "Relationship Type";
				}

				public static class ProductPriceList
				{
					public const string _1033 = "Product Price List";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class DonotallowBulkEmails
				{
					public const string _1033 = "Do not allow Bulk Emails";
				}

				public static class DonotallowBulkMails
				{
					public const string _1033 = "Do not allow Bulk Mails";
				}

				public static class DonotallowEmails
				{
					public const string _1033 = "Do not allow Emails";
				}

				public static class DonotallowFaxes
				{
					public const string _1033 = "Do not allow Faxes";
				}

				public static class DonotallowPhoneCalls
				{
					public const string _1033 = "Do not allow Phone Calls";
				}

				public static class DonotallowMails
				{
					public const string _1033 = "Do not allow Mails";
				}

				public static class SendMarketingMaterials
				{
					public const string _1033 = "Send Marketing Materials";
				}

				public static class Email
				{
					public const string _1033 = "Email";
				}

				public static class EmailAddress2
				{
					public const string _1033 = "Email Address 2";
				}

				public static class EmailAddress3
				{
					public const string _1033 = "Email Address 3";
				}

				public static class EntityImageId
				{
					public const string _1033 = "Entity Image Id";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class Fax
				{
					public const string _1033 = "Fax";
				}

				public static class FollowEmailActivity
				{
					public const string _1033 = "Follow Email Activity";
				}

				public static class FTPSite
				{
					public const string _1033 = "FTP Site";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class Industry
				{
					public const string _1033 = "Industry";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class LastDateIncludedinCampaign
				{
					public const string _1033 = "Last Date Included in Campaign";
				}

				public static class MarketCapitalization
				{
					public const string _1033 = "Market Capitalization";
				}

				public static class MarketCapitalizationBase
				{
					public const string _1033 = "Market Capitalization (Base)";
				}

				public static class MarketingOnly
				{
					public const string _1033 = "Marketing Only";
				}

				public static class MasterID
				{
					public const string _1033 = "Master ID";
				}

				public static class Merged
				{
					public const string _1033 = "Merged";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedByExternalParty
				{
					public const string _1033 = "Modified By (External Party)";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class BillingAccount
				{
					public const string _1033 = "Billing Account";
				}

				public static class ExternalID
				{
					public const string _1033 = "External ID";
				}

				public static class PreferredResourceDeprecated
				{
					public const string _1033 = "Preferred Resource (Deprecated)";
				}

				public static class SalesTaxCode
				{
					public const string _1033 = "Sales Tax Code";
				}

				public static class ServiceTerritory
				{
					public const string _1033 = "Service Territory";
				}

				public static class TaxExempt
				{
					public const string _1033 = "Tax Exempt";
				}

				public static class TaxExemptNumber
				{
					public const string _1033 = "Tax Exempt Number";
				}

				public static class TravelCharge
				{
					public const string _1033 = "Travel Charge";
				}

				public static class TravelChargeBase
				{
					public const string _1033 = "Travel Charge (Base)";
				}

				public static class TravelChargeType
				{
					public const string _1033 = "Travel Charge Type";
				}

				public static class WorkHourTemplate
				{
					public const string _1033 = "Work Hour Template";
				}

				public static class WorkOrderInstructions
				{
					public const string _1033 = "Work Order Instructions";
				}

				public static class AccountName
				{
					public const string _1033 = "Account Name";
				}

				public static class NumberofEmployees
				{
					public const string _1033 = "Number of Employees";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OpenDeals
				{
					public const string _1033 = "Open Deals";
				}

				public static class OpenDealsLastUpdatedOn
				{
					public const string _1033 = "Open Deals (Last Updated On)";
				}

				public static class OpenDealsState
				{
					public const string _1033 = "Open Deals (State)";
				}

				public static class OpenRevenue
				{
					public const string _1033 = "Open Revenue";
				}

				public static class OpenRevenueBase
				{
					public const string _1033 = "Open Revenue (Base)";
				}

				public static class OpenRevenueLastUpdatedOn
				{
					public const string _1033 = "Open Revenue (Last Updated On)";
				}

				public static class OpenRevenueState
				{
					public const string _1033 = "Open Revenue (State)";
				}

				public static class OriginatingLead
				{
					public const string _1033 = "Originating Lead";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class Ownership
				{
					public const string _1033 = "Ownership";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class ParentAccount
				{
					public const string _1033 = "Parent Account";
				}

				public static class ParticipatesinWorkflow
				{
					public const string _1033 = "Participates in Workflow";
				}

				public static class PaymentTerms
				{
					public const string _1033 = "Payment Terms";
				}

				public static class PreferredDay
				{
					public const string _1033 = "Preferred Day";
				}

				public static class PreferredTime
				{
					public const string _1033 = "Preferred Time";
				}

				public static class PreferredMethodofContact
				{
					public const string _1033 = "Preferred Method of Contact";
				}

				public static class PreferredFacilityEquipment
				{
					public const string _1033 = "Preferred Facility/Equipment";
				}

				public static class PreferredService
				{
					public const string _1033 = "Preferred Service";
				}

				public static class PreferredUser
				{
					public const string _1033 = "Preferred User";
				}

				public static class PrimaryContact
				{
					public const string _1033 = "Primary Contact";
				}

				public static class PrimarySatoriID
				{
					public const string _1033 = "Primary Satori ID";
				}

				public static class PrimaryTwitterID
				{
					public const string _1033 = "Primary Twitter ID";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class AnnualRevenue
				{
					public const string _1033 = "Annual Revenue";
				}

				public static class AnnualRevenueBase
				{
					public const string _1033 = "Annual Revenue (Base)";
				}

				public static class SharesOutstanding
				{
					public const string _1033 = "Shares Outstanding";
				}

				public static class ShippingMethod
				{
					public const string _1033 = "Shipping Method";
				}

				public static class SICCode
				{
					public const string _1033 = "SIC Code";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class __DeprecatedProcessStage
				{
					public const string _1033 = "(Deprecated) Process Stage";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class StockExchange
				{
					public const string _1033 = "Stock Exchange";
				}

				public static class TeamsFollowed
				{
					public const string _1033 = "TeamsFollowed";
				}

				public static class MainPhone
				{
					public const string _1033 = "Main Phone";
				}

				public static class OtherPhone
				{
					public const string _1033 = "Other Phone";
				}

				public static class Telephone3
				{
					public const string _1033 = "Telephone 3";
				}

				public static class TerritoryCode
				{
					public const string _1033 = "Territory Code";
				}

				public static class Territory
				{
					public const string _1033 = "Territory";
				}

				public static class TickerSymbol
				{
					public const string _1033 = "Ticker Symbol";
				}

				public static class TimeSpentbyme
				{
					public const string _1033 = "Time Spent by me";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class __DeprecatedTraversedPath
				{
					public const string _1033 = "(Deprecated) Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

				public static class Website
				{
					public const string _1033 = "Website";
				}

				public static class YomiAccountName
				{
					public const string _1033 = "Yomi Account Name";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfParty = "account_activity_parties";
				public const string AccountsOfMasterID = "account_master_account";
				public const string AccountsOfParentAccount = "account_parent_account";
				public const string ContactsOfCompanyName = "contact_customer_accounts";
				public const string CasesOfCustomer = "incident_customer_accounts";
				public const string AccountsOfBillingAccount = "msdyn_account_account_BillingAccount";
			}
			
			public static class NToOne
			{
				public const string AccountAsMasterID = "account_master_account";
				public const string AccountAsParentAccount = "account_parent_account";
				public const string ContactAsPrimaryContact = "account_primary_contact";
				public const string AccountAsBillingAccount = "msdyn_account_account_BillingAccount";

				public static class Lookups
				{
					public const string AccountAsMasterID = "masterid";
					public const string AccountAsParentAccount = "parentaccountid";
					public const string ContactAsPrimaryContact = "primarycontactid";
					public const string AccountAsBillingAccount = "msdyn_billingaccount";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#region AccountContract contract

	[DataContract, CrmEntityMapping("account", "Account", "Account")]
	public partial class AccountContract : EntityContract
	{
		[DataMember, CrmFieldMapping("accountid")] public Guid? Id;

		#region Relationships


		#endregion
	}

	#endregion

	#region AccountContract labels

    [DataContract]
    public class AccountContractLabels
    {
        [DataMember] public string EntityLabel = "Account";

		#region Attributes keyed labels

 
		#endregion

		#region Enums keyed labels


		#endregion
    }

	#endregion

	#endregion

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Metadata


		#endregion
	}

	#endregion

	#region Contact

	/// <summary>
	/// 'Contact'.<br />
	/// Person with whom a business unit has a relationship, such as customer, supplier, and colleague.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("contact")]
	public partial class Contact : GeneratedEntity<Contact.RelationName>
	{
		
		public Contact() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Contact";
		public const string SchemaName = "Contact";
		public const string EntityLogicalName = "contact";
		public const int EntityTypeCode = 2;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Label/value pairs

		#region Role

		public enum RoleEnum
		{
			[EnumMember]DecisionMaker = 1,
			[EnumMember]Employee = 2,
			[EnumMember]Influencer = 3,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]BillTo = 1,
			[EnumMember]ShipTo = 2,
			[EnumMember]Primary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region Address1FreightTerms

		public enum Address1FreightTermsEnum
		{
			[EnumMember]FOB = 1,
			[EnumMember]NoCharge = 2,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]Airborne = 1,
			[EnumMember]DHL = 2,
			[EnumMember]FedEx = 3,
			[EnumMember]UPS = 4,
			[EnumMember]PostalMail = 5,
			[EnumMember]FullLoad = 6,
			[EnumMember]WillCall = 7,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2FreightTerms

		public enum Address2FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3AddressType

		public enum Address3AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3FreightTerms

		public enum Address3FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3ShippingMethod

		public enum Address3ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region CreditHold

		public enum CreditHoldEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CustomerSize

		public enum CustomerSizeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region RelationshipType

		public enum RelationshipTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region DonotallowBulkEmails

		public enum DonotallowBulkEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowBulkMails

		public enum DonotallowBulkMailsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowMails

		public enum DonotallowMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region SendMarketingMaterials

		public enum SendMarketingMaterialsEnum
		{
			[EnumMember]DoNotSend = 1,
			[EnumMember]Send = 0,
		}

		#endregion
	
		#region Education

		public enum EducationEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region MaritalStatus

		public enum MaritalStatusEnum
		{
			[EnumMember]Single = 1,
			[EnumMember]Married = 2,
			[EnumMember]Divorced = 3,
			[EnumMember]Widowed = 4,
		}

		#endregion
	
		#region FollowEmailActivity

		public enum FollowEmailActivityEnum
		{
			[EnumMember]Allow = 1,
			[EnumMember]DoNotAllow = 0,
		}

		#endregion
	
		#region Gender

		public enum GenderEnum
		{
			[EnumMember]Male = 1,
			[EnumMember]Female = 2,
		}

		#endregion
	
		#region HasChildren

		public enum HasChildrenEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Autocreated

		public enum AutocreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region BackOfficeCustomer

		public enum BackOfficeCustomerEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region LeadSource

		public enum LeadSourceEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region MarketingOnly

		public enum MarketingOnlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Merged

		public enum MergedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GDPROptout

		public enum GDPROptoutEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region NotatCompanyFlag

		public enum NotatCompanyFlagEnum
		{
			[EnumMember]NoFeedback = 0,
			[EnumMember]NotatCompany = 1,
			[EnumMember]Ignore = 2,
		}

		#endregion
	
		#region ParticipatesinWorkflow

		public enum ParticipatesinWorkflowEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PaymentTerms

		public enum PaymentTermsEnum
		{
			[EnumMember]Net30 = 1,
			[EnumMember]_210Net30 = 2,
			[EnumMember]Net45 = 3,
			[EnumMember]Net60 = 4,
		}

		#endregion
	
		#region PreferredDay

		public enum PreferredDayEnum
		{
			[EnumMember]Sunday = 0,
			[EnumMember]Monday = 1,
			[EnumMember]Tuesday = 2,
			[EnumMember]Wednesday = 3,
			[EnumMember]Thursday = 4,
			[EnumMember]Friday = 5,
			[EnumMember]Saturday = 6,
		}

		#endregion
	
		#region PreferredTime

		public enum PreferredTimeEnum
		{
			[EnumMember]Morning = 1,
			[EnumMember]Afternoon = 2,
			[EnumMember]Evening = 3,
		}

		#endregion
	
		#region PreferredMethodofContact

		public enum PreferredMethodofContactEnum
		{
			[EnumMember]Any = 1,
			[EnumMember]Email = 2,
			[EnumMember]Phone = 3,
			[EnumMember]Fax = 4,
			[EnumMember]Mail = 5,
		}

		#endregion
	
		#region ShippingMethod

		public enum ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#region Territory

		public enum TerritoryEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Role = "accountrolecode";
				public const string Address1AddressType = "address1_addresstypecode";
				public const string Address1FreightTerms = "address1_freighttermscode";
				public const string Address1ShippingMethod = "address1_shippingmethodcode";
				public const string Address2AddressType = "address2_addresstypecode";
				public const string Address2FreightTerms = "address2_freighttermscode";
				public const string Address2ShippingMethod = "address2_shippingmethodcode";
				public const string Address3AddressType = "address3_addresstypecode";
				public const string Address3FreightTerms = "address3_freighttermscode";
				public const string Address3ShippingMethod = "address3_shippingmethodcode";
				public const string CreditHold = "creditonhold";
				public const string CustomerSize = "customersizecode";
				public const string RelationshipType = "customertypecode";
				public const string DonotallowBulkEmails = "donotbulkemail";
				public const string DonotallowBulkMails = "donotbulkpostalmail";
				public const string DonotallowEmails = "donotemail";
				public const string DonotallowFaxes = "donotfax";
				public const string DonotallowPhoneCalls = "donotphone";
				public const string DonotallowMails = "donotpostalmail";
				public const string SendMarketingMaterials = "donotsendmm";
				public const string Education = "educationcode";
				public const string MaritalStatus = "familystatuscode";
				public const string FollowEmailActivity = "followemail";
				public const string Gender = "gendercode";
				public const string HasChildren = "haschildrencode";
				public const string Autocreated = "isautocreate";
				public const string BackOfficeCustomer = "isbackofficecustomer";
				public const string IsPrivate = "isprivate";
				public const string LeadSource = "leadsourcecode";
				public const string MarketingOnly = "marketingonly";
				public const string Merged = "merged";
				public const string GDPROptout = "msdyn_gdproptout";
				public const string NotatCompanyFlag = "msdyn_orgchangestatus";
				public const string ParticipatesinWorkflow = "participatesinworkflow";
				public const string PaymentTerms = "paymenttermscode";
				public const string PreferredDay = "preferredappointmentdaycode";
				public const string PreferredTime = "preferredappointmenttimecode";
				public const string PreferredMethodofContact = "preferredcontactmethodcode";
				public const string ShippingMethod = "shippingmethodcode";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string Territory = "territorycode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Role 
				{
					public const string DecisionMaker_1033 = "Decision Maker";
					public const string Employee_1033 = "Employee";
					public const string Influencer_1033 = "Influencer";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Role), label, languageCode);
					}
				}

				public static class Address1AddressType 
				{
					public const string BillTo_1033 = "Bill To";
					public const string ShipTo_1033 = "Ship To";
					public const string Primary_1033 = "Primary";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1AddressType), label, languageCode);
					}
				}

				public static class Address1FreightTerms 
				{
					public const string FOB_1033 = "FOB";
					public const string NoCharge_1033 = "No Charge";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1FreightTerms), label, languageCode);
					}
				}

				public static class Address1ShippingMethod 
				{
					public const string Airborne_1033 = "Airborne";
					public const string DHL_1033 = "DHL";
					public const string FedEx_1033 = "FedEx";
					public const string UPS_1033 = "UPS";
					public const string PostalMail_1033 = "Postal Mail";
					public const string FullLoad_1033 = "Full Load";
					public const string WillCall_1033 = "Will Call";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address1ShippingMethod), label, languageCode);
					}
				}

				public static class Address2AddressType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2AddressType), label, languageCode);
					}
				}

				public static class Address2FreightTerms 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2FreightTerms), label, languageCode);
					}
				}

				public static class Address2ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address2ShippingMethod), label, languageCode);
					}
				}

				public static class Address3AddressType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address3AddressType), label, languageCode);
					}
				}

				public static class Address3FreightTerms 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address3FreightTerms), label, languageCode);
					}
				}

				public static class Address3ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Address3ShippingMethod), label, languageCode);
					}
				}

				public static class CreditHold 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CreditHold), label, languageCode);
					}
				}

				public static class CustomerSize 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerSize), label, languageCode);
					}
				}

				public static class RelationshipType 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RelationshipType), label, languageCode);
					}
				}

				public static class DonotallowBulkEmails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowBulkEmails), label, languageCode);
					}
				}

				public static class DonotallowBulkMails 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowBulkMails), label, languageCode);
					}
				}

				public static class DonotallowEmails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowEmails), label, languageCode);
					}
				}

				public static class DonotallowFaxes 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowFaxes), label, languageCode);
					}
				}

				public static class DonotallowPhoneCalls 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowPhoneCalls), label, languageCode);
					}
				}

				public static class DonotallowMails 
				{
					public const string DoNotAllow_1033 = "Do Not Allow";
					public const string Allow_1033 = "Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DonotallowMails), label, languageCode);
					}
				}

				public static class SendMarketingMaterials 
				{
					public const string DoNotSend_1033 = "Do Not Send";
					public const string Send_1033 = "Send";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SendMarketingMaterials), label, languageCode);
					}
				}

				public static class Education 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Education), label, languageCode);
					}
				}

				public static class MaritalStatus 
				{
					public const string Single_1033 = "Single";
					public const string Married_1033 = "Married";
					public const string Divorced_1033 = "Divorced";
					public const string Widowed_1033 = "Widowed";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(MaritalStatus), label, languageCode);
					}
				}

				public static class FollowEmailActivity 
				{
					public const string Allow_1033 = "Allow";
					public const string DoNotAllow_1033 = "Do Not Allow";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FollowEmailActivity), label, languageCode);
					}
				}

				public static class Gender 
				{
					public const string Male_1033 = "Male";
					public const string Female_1033 = "Female";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Gender), label, languageCode);
					}
				}

				public static class HasChildren 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(HasChildren), label, languageCode);
					}
				}

				public static class Autocreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Autocreated), label, languageCode);
					}
				}

				public static class BackOfficeCustomer 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(BackOfficeCustomer), label, languageCode);
					}
				}

				public static class IsPrivate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPrivate), label, languageCode);
					}
				}

				public static class LeadSource 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(LeadSource), label, languageCode);
					}
				}

				public static class MarketingOnly 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(MarketingOnly), label, languageCode);
					}
				}

				public static class Merged 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Merged), label, languageCode);
					}
				}

				public static class GDPROptout 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GDPROptout), label, languageCode);
					}
				}

				public static class NotatCompanyFlag 
				{
					public const string NoFeedback_1033 = "No Feedback";
					public const string NotatCompany_1033 = "Not at Company";
					public const string Ignore_1033 = "Ignore";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(NotatCompanyFlag), label, languageCode);
					}
				}

				public static class ParticipatesinWorkflow 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ParticipatesinWorkflow), label, languageCode);
					}
				}

				public static class PaymentTerms 
				{
					public const string Net30_1033 = "Net 30";
					public const string _210Net30_1033 = "2% 10, Net 30";
					public const string Net45_1033 = "Net 45";
					public const string Net60_1033 = "Net 60";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PaymentTerms), label, languageCode);
					}
				}

				public static class PreferredDay 
				{
					public const string Sunday_1033 = "Sunday";
					public const string Monday_1033 = "Monday";
					public const string Tuesday_1033 = "Tuesday";
					public const string Wednesday_1033 = "Wednesday";
					public const string Thursday_1033 = "Thursday";
					public const string Friday_1033 = "Friday";
					public const string Saturday_1033 = "Saturday";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredDay), label, languageCode);
					}
				}

				public static class PreferredTime 
				{
					public const string Morning_1033 = "Morning";
					public const string Afternoon_1033 = "Afternoon";
					public const string Evening_1033 = "Evening";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredTime), label, languageCode);
					}
				}

				public static class PreferredMethodofContact 
				{
					public const string Any_1033 = "Any";
					public const string Email_1033 = "Email";
					public const string Phone_1033 = "Phone";
					public const string Fax_1033 = "Fax";
					public const string Mail_1033 = "Mail";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PreferredMethodofContact), label, languageCode);
					}
				}

				public static class ShippingMethod 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ShippingMethod), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

				public static class Territory 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Territory), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Account = "accountid";
			public const string Role = "accountrolecode";
			public const string Address1ID = "address1_addressid";
			public const string Address1AddressType = "address1_addresstypecode";
			public const string Address1City = "address1_city";
			public const string Address1 = "address1_composite";
			public const string Address1CountryRegion = "address1_country";
			public const string Address1County = "address1_county";
			public const string Address1Fax = "address1_fax";
			public const string Address1FreightTerms = "address1_freighttermscode";
			public const string Address1Latitude = "address1_latitude";
			public const string Address1Street1 = "address1_line1";
			public const string Address1Street2 = "address1_line2";
			public const string Address1Street3 = "address1_line3";
			public const string Address1Longitude = "address1_longitude";
			public const string Address1Name = "address1_name";
			public const string Address1ZIPPostalCode = "address1_postalcode";
			public const string Address1PostOfficeBox = "address1_postofficebox";
			public const string Address1PrimaryContactName = "address1_primarycontactname";
			public const string Address1ShippingMethod = "address1_shippingmethodcode";
			public const string Address1StateProvince = "address1_stateorprovince";
			public const string Address1Phone = "address1_telephone1";
			public const string Address1Telephone2 = "address1_telephone2";
			public const string Address1Telephone3 = "address1_telephone3";
			public const string Address1UPSZone = "address1_upszone";
			public const string Address1UTCOffset = "address1_utcoffset";
			public const string Address2ID = "address2_addressid";
			public const string Address2AddressType = "address2_addresstypecode";
			public const string Address2City = "address2_city";
			public const string Address2 = "address2_composite";
			public const string Address2CountryRegion = "address2_country";
			public const string Address2County = "address2_county";
			public const string Address2Fax = "address2_fax";
			public const string Address2FreightTerms = "address2_freighttermscode";
			public const string Address2Latitude = "address2_latitude";
			public const string Address2Street1 = "address2_line1";
			public const string Address2Street2 = "address2_line2";
			public const string Address2Street3 = "address2_line3";
			public const string Address2Longitude = "address2_longitude";
			public const string Address2Name = "address2_name";
			public const string Address2ZIPPostalCode = "address2_postalcode";
			public const string Address2PostOfficeBox = "address2_postofficebox";
			public const string Address2PrimaryContactName = "address2_primarycontactname";
			public const string Address2ShippingMethod = "address2_shippingmethodcode";
			public const string Address2StateProvince = "address2_stateorprovince";
			public const string Address2Telephone1 = "address2_telephone1";
			public const string Address2Telephone2 = "address2_telephone2";
			public const string Address2Telephone3 = "address2_telephone3";
			public const string Address2UPSZone = "address2_upszone";
			public const string Address2UTCOffset = "address2_utcoffset";
			public const string Address3ID = "address3_addressid";
			public const string Address3AddressType = "address3_addresstypecode";
			public const string Address3City = "address3_city";
			public const string Address3 = "address3_composite";
			public const string Address3CountryRegion = "address3_country";
			public const string Address3County = "address3_county";
			public const string Address3Fax = "address3_fax";
			public const string Address3FreightTerms = "address3_freighttermscode";
			public const string Address3Latitude = "address3_latitude";
			public const string Address3Street1 = "address3_line1";
			public const string Address3Street2 = "address3_line2";
			public const string Address3Street3 = "address3_line3";
			public const string Address3Longitude = "address3_longitude";
			public const string Address3Name = "address3_name";
			public const string Address3ZIPPostalCode = "address3_postalcode";
			public const string Address3PostOfficeBox = "address3_postofficebox";
			public const string Address3PrimaryContactName = "address3_primarycontactname";
			public const string Address3ShippingMethod = "address3_shippingmethodcode";
			public const string Address3StateProvince = "address3_stateorprovince";
			public const string Address3Telephone1 = "address3_telephone1";
			public const string Address3Telephone2 = "address3_telephone2";
			public const string Address3Telephone3 = "address3_telephone3";
			public const string Address3UPSZone = "address3_upszone";
			public const string Address3UTCOffset = "address3_utcoffset";
			public const string Aging30 = "aging30";
			public const string Aging30Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90Base = "aging90_base";
			public const string Anniversary = "anniversary";
			public const string AnnualIncome = "annualincome";
			public const string AnnualIncomeBase = "annualincome_base";
			public const string Assistant = "assistantname";
			public const string AssistantPhone = "assistantphone";
			public const string Birthday = "birthdate";
			public const string BusinessPhone2 = "business2";
			public const string BusinessCard = "businesscard";
			public const string BusinessCardAttributes = "businesscardattributes";
			public const string CallbackNumber = "callback";
			public const string ChildrensNames = "childrensnames";
			public const string CompanyPhone = "company";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimitBase = "creditlimit_base";
			public const string CreditHold = "creditonhold";
			public const string CustomerSize = "customersizecode";
			public const string RelationshipType = "customertypecode";
			public const string PriceList = "defaultpricelevelid";
			public const string Department = "department";
			public const string Description = "description";
			public const string DonotallowBulkEmails = "donotbulkemail";
			public const string DonotallowBulkMails = "donotbulkpostalmail";
			public const string DonotallowEmails = "donotemail";
			public const string DonotallowFaxes = "donotfax";
			public const string DonotallowPhoneCalls = "donotphone";
			public const string DonotallowMails = "donotpostalmail";
			public const string SendMarketingMaterials = "donotsendmm";
			public const string Education = "educationcode";
			public const string Email = "emailaddress1";
			public const string EmailAddress2 = "emailaddress2";
			public const string EmailAddress3 = "emailaddress3";
			public const string Employee = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExternalUserIdentifier = "externaluseridentifier";
			public const string MaritalStatus = "familystatuscode";
			public const string Fax = "fax";
			public const string FirstName = "firstname";
			public const string FollowEmailActivity = "followemail";
			public const string FTPSite = "ftpsiteurl";
			public const string FullName = "fullname";
			public const string Gender = "gendercode";
			public const string Government = "governmentid";
			public const string HasChildren = "haschildrencode";
			public const string HomePhone2 = "home2";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string BackOfficeCustomer = "isbackofficecustomer";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastDateIncludedinCampaign = "lastusedincampaign";
			public const string LeadSource = "leadsourcecode";
			public const string Manager = "managername";
			public const string ManagerPhone = "managerphone";
			public const string MarketingOnly = "marketingonly";
			public const string MasterID = "masterid";
			public const string Merged = "merged";
			public const string MiddleName = "middlename";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string GDPROptout = "msdyn_gdproptout";
			public const string NotatCompanyFlag = "msdyn_orgchangestatus";
			public const string Nickname = "nickname";
			public const string NoofChildren = "numberofchildren";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string OriginatingLead = "originatingleadid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Pager = "pager";
			public const string ParentContact = "parentcontactid";
			public const string CompanyName = "parentcustomerid";
			public const string ParticipatesinWorkflow = "participatesinworkflow";
			public const string PaymentTerms = "paymenttermscode";
			public const string PreferredDay = "preferredappointmentdaycode";
			public const string PreferredTime = "preferredappointmenttimecode";
			public const string PreferredMethodofContact = "preferredcontactmethodcode";
			public const string PreferredFacilityEquipment = "preferredequipmentid";
			public const string PreferredService = "preferredserviceid";
			public const string PreferredUser = "preferredsystemuserid";
			public const string Process = "processid";
			public const string Salutation = "salutation";
			public const string ShippingMethod = "shippingmethodcode";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SpousePartnerName = "spousesname";
			public const string __DeprecatedProcessStage = "stageid";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string Suffix = "suffix";
			public const string TeamsFollowed = "teamsfollowed";
			public const string BusinessPhone = "telephone1";
			public const string HomePhone = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string Territory = "territorycode";
			public const string TimeSpentbyme = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string Website = "websiteurl";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string Account = "AccountId";
				public const string Role = "AccountRoleCode";
				public const string Address1ID = "Address1_AddressId";
				public const string Address1AddressType = "Address1_AddressTypeCode";
				public const string Address1City = "Address1_City";
				public const string Address1 = "Address1_Composite";
				public const string Address1CountryRegion = "Address1_Country";
				public const string Address1County = "Address1_County";
				public const string Address1Fax = "Address1_Fax";
				public const string Address1FreightTerms = "Address1_FreightTermsCode";
				public const string Address1Latitude = "Address1_Latitude";
				public const string Address1Street1 = "Address1_Line1";
				public const string Address1Street2 = "Address1_Line2";
				public const string Address1Street3 = "Address1_Line3";
				public const string Address1Longitude = "Address1_Longitude";
				public const string Address1Name = "Address1_Name";
				public const string Address1ZIPPostalCode = "Address1_PostalCode";
				public const string Address1PostOfficeBox = "Address1_PostOfficeBox";
				public const string Address1PrimaryContactName = "Address1_PrimaryContactName";
				public const string Address1ShippingMethod = "Address1_ShippingMethodCode";
				public const string Address1StateProvince = "Address1_StateOrProvince";
				public const string Address1Phone = "Address1_Telephone1";
				public const string Address1Telephone2 = "Address1_Telephone2";
				public const string Address1Telephone3 = "Address1_Telephone3";
				public const string Address1UPSZone = "Address1_UPSZone";
				public const string Address1UTCOffset = "Address1_UTCOffset";
				public const string Address2ID = "Address2_AddressId";
				public const string Address2AddressType = "Address2_AddressTypeCode";
				public const string Address2City = "Address2_City";
				public const string Address2 = "Address2_Composite";
				public const string Address2CountryRegion = "Address2_Country";
				public const string Address2County = "Address2_County";
				public const string Address2Fax = "Address2_Fax";
				public const string Address2FreightTerms = "Address2_FreightTermsCode";
				public const string Address2Latitude = "Address2_Latitude";
				public const string Address2Street1 = "Address2_Line1";
				public const string Address2Street2 = "Address2_Line2";
				public const string Address2Street3 = "Address2_Line3";
				public const string Address2Longitude = "Address2_Longitude";
				public const string Address2Name = "Address2_Name";
				public const string Address2ZIPPostalCode = "Address2_PostalCode";
				public const string Address2PostOfficeBox = "Address2_PostOfficeBox";
				public const string Address2PrimaryContactName = "Address2_PrimaryContactName";
				public const string Address2ShippingMethod = "Address2_ShippingMethodCode";
				public const string Address2StateProvince = "Address2_StateOrProvince";
				public const string Address2Telephone1 = "Address2_Telephone1";
				public const string Address2Telephone2 = "Address2_Telephone2";
				public const string Address2Telephone3 = "Address2_Telephone3";
				public const string Address2UPSZone = "Address2_UPSZone";
				public const string Address2UTCOffset = "Address2_UTCOffset";
				public const string Address3ID = "Address3_AddressId";
				public const string Address3AddressType = "Address3_AddressTypeCode";
				public const string Address3City = "Address3_City";
				public const string Address3 = "Address3_Composite";
				public const string Address3CountryRegion = "Address3_Country";
				public const string Address3County = "Address3_County";
				public const string Address3Fax = "Address3_Fax";
				public const string Address3FreightTerms = "Address3_FreightTermsCode";
				public const string Address3Latitude = "Address3_Latitude";
				public const string Address3Street1 = "Address3_Line1";
				public const string Address3Street2 = "Address3_Line2";
				public const string Address3Street3 = "Address3_Line3";
				public const string Address3Longitude = "Address3_Longitude";
				public const string Address3Name = "Address3_Name";
				public const string Address3ZIPPostalCode = "Address3_PostalCode";
				public const string Address3PostOfficeBox = "Address3_PostOfficeBox";
				public const string Address3PrimaryContactName = "Address3_PrimaryContactName";
				public const string Address3ShippingMethod = "Address3_ShippingMethodCode";
				public const string Address3StateProvince = "Address3_StateOrProvince";
				public const string Address3Telephone1 = "Address3_Telephone1";
				public const string Address3Telephone2 = "Address3_Telephone2";
				public const string Address3Telephone3 = "Address3_Telephone3";
				public const string Address3UPSZone = "Address3_UPSZone";
				public const string Address3UTCOffset = "Address3_UTCOffset";
				public const string Aging30 = "Aging30";
				public const string Aging30Base = "Aging30_Base";
				public const string Aging60 = "Aging60";
				public const string Aging60Base = "Aging60_Base";
				public const string Aging90 = "Aging90";
				public const string Aging90Base = "Aging90_Base";
				public const string Anniversary = "Anniversary";
				public const string AnnualIncome = "AnnualIncome";
				public const string AnnualIncomeBase = "AnnualIncome_Base";
				public const string Assistant = "AssistantName";
				public const string AssistantPhone = "AssistantPhone";
				public const string Birthday = "BirthDate";
				public const string BusinessPhone2 = "Business2";
				public const string BusinessCard = "BusinessCard";
				public const string BusinessCardAttributes = "BusinessCardAttributes";
				public const string CallbackNumber = "Callback";
				public const string ChildrensNames = "ChildrensNames";
				public const string CompanyPhone = "Company";
				public const string ContactId = "ContactId";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedByExternalParty = "CreatedByExternalParty";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string CreditLimit = "CreditLimit";
				public const string CreditLimitBase = "CreditLimit_Base";
				public const string CreditHold = "CreditOnHold";
				public const string CustomerSize = "CustomerSizeCode";
				public const string RelationshipType = "CustomerTypeCode";
				public const string PriceList = "DefaultPriceLevelId";
				public const string Department = "Department";
				public const string Description = "Description";
				public const string DonotallowBulkEmails = "DoNotBulkEMail";
				public const string DonotallowBulkMails = "DoNotBulkPostalMail";
				public const string DonotallowEmails = "DoNotEMail";
				public const string DonotallowFaxes = "DoNotFax";
				public const string DonotallowPhoneCalls = "DoNotPhone";
				public const string DonotallowMails = "DoNotPostalMail";
				public const string SendMarketingMaterials = "DoNotSendMM";
				public const string Education = "EducationCode";
				public const string Email = "EMailAddress1";
				public const string EmailAddress2 = "EMailAddress2";
				public const string EmailAddress3 = "EMailAddress3";
				public const string Employee = "EmployeeId";
				public const string EntityImageId = "EntityImageId";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExternalUserIdentifier = "ExternalUserIdentifier";
				public const string MaritalStatus = "FamilyStatusCode";
				public const string Fax = "Fax";
				public const string FirstName = "FirstName";
				public const string FollowEmailActivity = "FollowEmail";
				public const string FTPSite = "FtpSiteUrl";
				public const string FullName = "FullName";
				public const string Gender = "GenderCode";
				public const string Government = "GovernmentId";
				public const string HasChildren = "HasChildrenCode";
				public const string HomePhone2 = "Home2";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string BackOfficeCustomer = "IsBackofficeCustomer";
				public const string JobTitle = "JobTitle";
				public const string LastName = "LastName";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string LastDateIncludedinCampaign = "LastUsedInCampaign";
				public const string LeadSource = "LeadSourceCode";
				public const string Manager = "ManagerName";
				public const string ManagerPhone = "ManagerPhone";
				public const string MarketingOnly = "MarketingOnly";
				public const string MasterID = "MasterId";
				public const string Merged = "Merged";
				public const string MiddleName = "MiddleName";
				public const string MobilePhone = "MobilePhone";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedByExternalParty = "ModifiedByExternalParty";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string GDPROptout = "msdyn_gdproptout";
				public const string NotatCompanyFlag = "msdyn_orgchangestatus";
				public const string Nickname = "NickName";
				public const string NoofChildren = "NumberOfChildren";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string OriginatingLead = "OriginatingLeadId";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Pager = "Pager";
				public const string ParentContact = "ParentContactId";
				public const string CompanyName = "ParentCustomerId";
				public const string ParticipatesinWorkflow = "ParticipatesInWorkflow";
				public const string PaymentTerms = "PaymentTermsCode";
				public const string PreferredDay = "PreferredAppointmentDayCode";
				public const string PreferredTime = "PreferredAppointmentTimeCode";
				public const string PreferredMethodofContact = "PreferredContactMethodCode";
				public const string PreferredFacilityEquipment = "PreferredEquipmentId";
				public const string PreferredService = "PreferredServiceId";
				public const string PreferredUser = "PreferredSystemUserId";
				public const string Process = "ProcessId";
				public const string Salutation = "Salutation";
				public const string ShippingMethod = "ShippingMethodCode";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SpousePartnerName = "SpousesName";
				public const string __DeprecatedProcessStage = "StageId";
				public const string Status = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string Suffix = "Suffix";
				public const string TeamsFollowed = "TeamsFollowed";
				public const string BusinessPhone = "Telephone1";
				public const string HomePhone = "Telephone2";
				public const string Telephone3 = "Telephone3";
				public const string Territory = "TerritoryCode";
				public const string TimeSpentbyme = "TimeSpentByMeOnEmailAndMeetings";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Currency = "TransactionCurrencyId";
				public const string __DeprecatedTraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
				public const string Website = "WebSiteUrl";
				public const string YomiFirstName = "YomiFirstName";
				public const string YomiFullName = "YomiFullName";
				public const string YomiLastName = "YomiLastName";
				public const string YomiMiddleName = "YomiMiddleName";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Account
				{
					public const string _1033 = "Account";
				}

				public static class Role
				{
					public const string _1033 = "Role";
				}

				public static class Address1ID
				{
					public const string _1033 = "Address 1: ID";
				}

				public static class Address1AddressType
				{
					public const string _1033 = "Address 1: Address Type";
				}

				public static class Address1City
				{
					public const string _1033 = "Address 1: City";
				}

				public static class Address1
				{
					public const string _1033 = "Address 1";
				}

				public static class Address1CountryRegion
				{
					public const string _1033 = "Address 1: Country/Region";
				}

				public static class Address1County
				{
					public const string _1033 = "Address 1: County";
				}

				public static class Address1Fax
				{
					public const string _1033 = "Address 1: Fax";
				}

				public static class Address1FreightTerms
				{
					public const string _1033 = "Address 1: Freight Terms";
				}

				public static class Address1Latitude
				{
					public const string _1033 = "Address 1: Latitude";
				}

				public static class Address1Street1
				{
					public const string _1033 = "Address 1: Street 1";
				}

				public static class Address1Street2
				{
					public const string _1033 = "Address 1: Street 2";
				}

				public static class Address1Street3
				{
					public const string _1033 = "Address 1: Street 3";
				}

				public static class Address1Longitude
				{
					public const string _1033 = "Address 1: Longitude";
				}

				public static class Address1Name
				{
					public const string _1033 = "Address 1: Name";
				}

				public static class Address1ZIPPostalCode
				{
					public const string _1033 = "Address 1: ZIP/Postal Code";
				}

				public static class Address1PostOfficeBox
				{
					public const string _1033 = "Address 1: Post Office Box";
				}

				public static class Address1PrimaryContactName
				{
					public const string _1033 = "Address 1: Primary Contact Name";
				}

				public static class Address1ShippingMethod
				{
					public const string _1033 = "Address 1: Shipping Method";
				}

				public static class Address1StateProvince
				{
					public const string _1033 = "Address 1: State/Province";
				}

				public static class Address1Phone
				{
					public const string _1033 = "Address 1: Phone";
				}

				public static class Address1Telephone2
				{
					public const string _1033 = "Address 1: Telephone 2";
				}

				public static class Address1Telephone3
				{
					public const string _1033 = "Address 1: Telephone 3";
				}

				public static class Address1UPSZone
				{
					public const string _1033 = "Address 1: UPS Zone";
				}

				public static class Address1UTCOffset
				{
					public const string _1033 = "Address 1: UTC Offset";
				}

				public static class Address2ID
				{
					public const string _1033 = "Address 2: ID";
				}

				public static class Address2AddressType
				{
					public const string _1033 = "Address 2: Address Type";
				}

				public static class Address2City
				{
					public const string _1033 = "Address 2: City";
				}

				public static class Address2
				{
					public const string _1033 = "Address 2";
				}

				public static class Address2CountryRegion
				{
					public const string _1033 = "Address 2: Country/Region";
				}

				public static class Address2County
				{
					public const string _1033 = "Address 2: County";
				}

				public static class Address2Fax
				{
					public const string _1033 = "Address 2: Fax";
				}

				public static class Address2FreightTerms
				{
					public const string _1033 = "Address 2: Freight Terms";
				}

				public static class Address2Latitude
				{
					public const string _1033 = "Address 2: Latitude";
				}

				public static class Address2Street1
				{
					public const string _1033 = "Address 2: Street 1";
				}

				public static class Address2Street2
				{
					public const string _1033 = "Address 2: Street 2";
				}

				public static class Address2Street3
				{
					public const string _1033 = "Address 2: Street 3";
				}

				public static class Address2Longitude
				{
					public const string _1033 = "Address 2: Longitude";
				}

				public static class Address2Name
				{
					public const string _1033 = "Address 2: Name";
				}

				public static class Address2ZIPPostalCode
				{
					public const string _1033 = "Address 2: ZIP/Postal Code";
				}

				public static class Address2PostOfficeBox
				{
					public const string _1033 = "Address 2: Post Office Box";
				}

				public static class Address2PrimaryContactName
				{
					public const string _1033 = "Address 2: Primary Contact Name";
				}

				public static class Address2ShippingMethod
				{
					public const string _1033 = "Address 2: Shipping Method";
				}

				public static class Address2StateProvince
				{
					public const string _1033 = "Address 2: State/Province";
				}

				public static class Address2Telephone1
				{
					public const string _1033 = "Address 2: Telephone 1";
				}

				public static class Address2Telephone2
				{
					public const string _1033 = "Address 2: Telephone 2";
				}

				public static class Address2Telephone3
				{
					public const string _1033 = "Address 2: Telephone 3";
				}

				public static class Address2UPSZone
				{
					public const string _1033 = "Address 2: UPS Zone";
				}

				public static class Address2UTCOffset
				{
					public const string _1033 = "Address 2: UTC Offset";
				}

				public static class Address3ID
				{
					public const string _1033 = "Address 3: ID";
				}

				public static class Address3AddressType
				{
					public const string _1033 = "Address 3: Address Type";
				}

				public static class Address3City
				{
					public const string _1033 = "Address 3: City";
				}

				public static class Address3
				{
					public const string _1033 = "Address 3";
				}

				public static class Address3CountryRegion
				{
					public const string _1033 = "Address3: Country/Region";
				}

				public static class Address3County
				{
					public const string _1033 = "Address 3: County";
				}

				public static class Address3Fax
				{
					public const string _1033 = "Address 3: Fax";
				}

				public static class Address3FreightTerms
				{
					public const string _1033 = "Address 3: Freight Terms";
				}

				public static class Address3Latitude
				{
					public const string _1033 = "Address 3: Latitude";
				}

				public static class Address3Street1
				{
					public const string _1033 = "Address3: Street 1";
				}

				public static class Address3Street2
				{
					public const string _1033 = "Address3: Street 2";
				}

				public static class Address3Street3
				{
					public const string _1033 = "Address3: Street 3";
				}

				public static class Address3Longitude
				{
					public const string _1033 = "Address 3: Longitude";
				}

				public static class Address3Name
				{
					public const string _1033 = "Address 3: Name";
				}

				public static class Address3ZIPPostalCode
				{
					public const string _1033 = "Address3: ZIP/Postal Code";
				}

				public static class Address3PostOfficeBox
				{
					public const string _1033 = "Address 3: Post Office Box";
				}

				public static class Address3PrimaryContactName
				{
					public const string _1033 = "Address 3: Primary Contact Name";
				}

				public static class Address3ShippingMethod
				{
					public const string _1033 = "Address 3: Shipping Method";
				}

				public static class Address3StateProvince
				{
					public const string _1033 = "Address3: State/Province";
				}

				public static class Address3Telephone1
				{
					public const string _1033 = "Address 3: Telephone1";
				}

				public static class Address3Telephone2
				{
					public const string _1033 = "Address 3: Telephone2";
				}

				public static class Address3Telephone3
				{
					public const string _1033 = "Address 3: Telephone3";
				}

				public static class Address3UPSZone
				{
					public const string _1033 = "Address 3: UPS Zone";
				}

				public static class Address3UTCOffset
				{
					public const string _1033 = "Address 3: UTC Offset";
				}

				public static class Aging30
				{
					public const string _1033 = "Aging 30";
				}

				public static class Aging30Base
				{
					public const string _1033 = "Aging 30 (Base)";
				}

				public static class Aging60
				{
					public const string _1033 = "Aging 60";
				}

				public static class Aging60Base
				{
					public const string _1033 = "Aging 60 (Base)";
				}

				public static class Aging90
				{
					public const string _1033 = "Aging 90";
				}

				public static class Aging90Base
				{
					public const string _1033 = "Aging 90 (Base)";
				}

				public static class Anniversary
				{
					public const string _1033 = "Anniversary";
				}

				public static class AnnualIncome
				{
					public const string _1033 = "Annual Income";
				}

				public static class AnnualIncomeBase
				{
					public const string _1033 = "Annual Income (Base)";
				}

				public static class Assistant
				{
					public const string _1033 = "Assistant";
				}

				public static class AssistantPhone
				{
					public const string _1033 = "Assistant Phone";
				}

				public static class Birthday
				{
					public const string _1033 = "Birthday";
				}

				public static class BusinessPhone2
				{
					public const string _1033 = "Business Phone 2";
				}

				public static class BusinessCard
				{
					public const string _1033 = "Business Card";
				}

				public static class BusinessCardAttributes
				{
					public const string _1033 = "BusinessCardAttributes";
				}

				public static class CallbackNumber
				{
					public const string _1033 = "Callback Number";
				}

				public static class ChildrensNames
				{
					public const string _1033 = "Children\'s Names";
				}

				public static class CompanyPhone
				{
					public const string _1033 = "Company Phone";
				}

				public static class ContactId
				{
					public const string _1033 = "Contact";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedByExternalParty
				{
					public const string _1033 = "Created By (External Party)";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CreditLimit
				{
					public const string _1033 = "Credit Limit";
				}

				public static class CreditLimitBase
				{
					public const string _1033 = "Credit Limit (Base)";
				}

				public static class CreditHold
				{
					public const string _1033 = "Credit Hold";
				}

				public static class CustomerSize
				{
					public const string _1033 = "Customer Size";
				}

				public static class RelationshipType
				{
					public const string _1033 = "Relationship Type";
				}

				public static class PriceList
				{
					public const string _1033 = "Price List";
				}

				public static class Department
				{
					public const string _1033 = "Department";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class DonotallowBulkEmails
				{
					public const string _1033 = "Do not allow Bulk Emails";
				}

				public static class DonotallowBulkMails
				{
					public const string _1033 = "Do not allow Bulk Mails";
				}

				public static class DonotallowEmails
				{
					public const string _1033 = "Do not allow Emails";
				}

				public static class DonotallowFaxes
				{
					public const string _1033 = "Do not allow Faxes";
				}

				public static class DonotallowPhoneCalls
				{
					public const string _1033 = "Do not allow Phone Calls";
				}

				public static class DonotallowMails
				{
					public const string _1033 = "Do not allow Mails";
				}

				public static class SendMarketingMaterials
				{
					public const string _1033 = "Send Marketing Materials";
				}

				public static class Education
				{
					public const string _1033 = "Education";
				}

				public static class Email
				{
					public const string _1033 = "Email";
				}

				public static class EmailAddress2
				{
					public const string _1033 = "Email Address 2";
				}

				public static class EmailAddress3
				{
					public const string _1033 = "Email Address 3";
				}

				public static class Employee
				{
					public const string _1033 = "Employee";
				}

				public static class EntityImageId
				{
					public const string _1033 = "Entity Image Id";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ExternalUserIdentifier
				{
					public const string _1033 = "External User Identifier";
				}

				public static class MaritalStatus
				{
					public const string _1033 = "Marital Status";
				}

				public static class Fax
				{
					public const string _1033 = "Fax";
				}

				public static class FirstName
				{
					public const string _1033 = "First Name";
				}

				public static class FollowEmailActivity
				{
					public const string _1033 = "Follow Email Activity";
				}

				public static class FTPSite
				{
					public const string _1033 = "FTP Site";
				}

				public static class FullName
				{
					public const string _1033 = "Full Name";
				}

				public static class Gender
				{
					public const string _1033 = "Gender";
				}

				public static class Government
				{
					public const string _1033 = "Government";
				}

				public static class HasChildren
				{
					public const string _1033 = "Has Children";
				}

				public static class HomePhone2
				{
					public const string _1033 = "Home Phone 2";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class BackOfficeCustomer
				{
					public const string _1033 = "Back Office Customer";
				}

				public static class JobTitle
				{
					public const string _1033 = "Job Title";
				}

				public static class LastName
				{
					public const string _1033 = "Last Name";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class LastDateIncludedinCampaign
				{
					public const string _1033 = "Last Date Included in Campaign";
				}

				public static class LeadSource
				{
					public const string _1033 = "Lead Source";
				}

				public static class Manager
				{
					public const string _1033 = "Manager";
				}

				public static class ManagerPhone
				{
					public const string _1033 = "Manager Phone";
				}

				public static class MarketingOnly
				{
					public const string _1033 = "Marketing Only";
				}

				public static class MasterID
				{
					public const string _1033 = "Master ID";
				}

				public static class Merged
				{
					public const string _1033 = "Merged";
				}

				public static class MiddleName
				{
					public const string _1033 = "Middle Name";
				}

				public static class MobilePhone
				{
					public const string _1033 = "Mobile Phone";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedByExternalParty
				{
					public const string _1033 = "Modified By (External Party)";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class GDPROptout
				{
					public const string _1033 = "GDPR Optout";
				}

				public static class NotatCompanyFlag
				{
					public const string _1033 = "Not at Company Flag";
				}

				public static class Nickname
				{
					public const string _1033 = "Nickname";
				}

				public static class NoofChildren
				{
					public const string _1033 = "No. of Children";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OriginatingLead
				{
					public const string _1033 = "Originating Lead";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Pager
				{
					public const string _1033 = "Pager";
				}

				public static class ParentContact
				{
					public const string _1033 = "Parent Contact";
				}

				public static class CompanyName
				{
					public const string _1033 = "Company Name";
				}

				public static class ParticipatesinWorkflow
				{
					public const string _1033 = "Participates in Workflow";
				}

				public static class PaymentTerms
				{
					public const string _1033 = "Payment Terms";
				}

				public static class PreferredDay
				{
					public const string _1033 = "Preferred Day";
				}

				public static class PreferredTime
				{
					public const string _1033 = "Preferred Time";
				}

				public static class PreferredMethodofContact
				{
					public const string _1033 = "Preferred Method of Contact";
				}

				public static class PreferredFacilityEquipment
				{
					public const string _1033 = "Preferred Facility/Equipment";
				}

				public static class PreferredService
				{
					public const string _1033 = "Preferred Service";
				}

				public static class PreferredUser
				{
					public const string _1033 = "Preferred User";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class Salutation
				{
					public const string _1033 = "Salutation";
				}

				public static class ShippingMethod
				{
					public const string _1033 = "Shipping Method";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SpousePartnerName
				{
					public const string _1033 = "Spouse/Partner Name";
				}

				public static class __DeprecatedProcessStage
				{
					public const string _1033 = "(Deprecated) Process Stage";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class Suffix
				{
					public const string _1033 = "Suffix";
				}

				public static class TeamsFollowed
				{
					public const string _1033 = "TeamsFollowed";
				}

				public static class BusinessPhone
				{
					public const string _1033 = "Business Phone";
				}

				public static class HomePhone
				{
					public const string _1033 = "Home Phone";
				}

				public static class Telephone3
				{
					public const string _1033 = "Telephone 3";
				}

				public static class Territory
				{
					public const string _1033 = "Territory";
				}

				public static class TimeSpentbyme
				{
					public const string _1033 = "Time Spent by me";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class __DeprecatedTraversedPath
				{
					public const string _1033 = "(Deprecated) Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

				public static class Website
				{
					public const string _1033 = "Website";
				}

				public static class YomiFirstName
				{
					public const string _1033 = "Yomi First Name";
				}

				public static class YomiFullName
				{
					public const string _1033 = "Yomi Full Name";
				}

				public static class YomiLastName
				{
					public const string _1033 = "Yomi Last Name";
				}

				public static class YomiMiddleName
				{
					public const string _1033 = "Yomi Middle Name";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string AccountsOfPrimaryContact = "account_primary_contact";
				public const string ActivityPartysOfParty = "contact_activity_parties";
				public const string CasesOfContact = "contact_as_primary_contact";
				public const string CasesOfResponsibleContact = "contact_as_responsible_contact";
				public const string ContactsOfCompanyName = "contact_customer_contacts";
				public const string ContactsOfMasterID = "contact_master_contact";
				public const string CasesOfCustomer = "incident_customer_contacts";
			}
			
			public static class NToOne
			{
				public const string AccountAsCompanyName = "contact_customer_accounts";
				public const string ContactAsCompanyName = "contact_customer_contacts";
				public const string ContactAsMasterID = "contact_master_contact";

				public static class Lookups
				{
					public const string AccountAsCompanyName = "parentcustomerid";
					public const string ContactAsCompanyName = "parentcustomerid";
					public const string ContactAsMasterID = "masterid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#region ContactContract contract

	[DataContract, CrmEntityMapping("contact", "Contact", "Contact")]
	public partial class ContactContract : EntityContract
	{
		[DataMember, CrmFieldMapping("contactid")] public Guid? Id;

		#region Relationships


		#endregion
	}

	#endregion

	#region ContactContract labels

    [DataContract]
    public class ContactContractLabels
    {
        [DataMember] public string EntityLabel = "Contact";

		#region Attributes keyed labels

 
		#endregion

		#region Enums keyed labels


		#endregion
    }

	#endregion

	#endregion

	#region Case

	/// <summary>
	/// 'Incident'.<br />
	/// Service request case associated with a contract.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("incident")]
	public partial class Case : GeneratedEntity<Case.RelationName>
	{
		
		public Case() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Case";
		public const string SchemaName = "Incident";
		public const string EntityLogicalName = "incident";
		public const int EntityTypeCode = 112;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Label/value pairs

		#region ActivitiesComplete

		public enum ActivitiesCompleteEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region BlockedProfile

		public enum BlockedProfileEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Origin

		public enum OriginEnum
		{
			[EnumMember]Phone = 1,
			[EnumMember]Email = 2,
			[EnumMember]Web = 3,
			[EnumMember]Facebook = 2483,
			[EnumMember]Twitter = 3986,
		}

		#endregion
	
		#region CaseType

		public enum CaseTypeEnum
		{
			[EnumMember]Question = 1,
			[EnumMember]Problem = 2,
			[EnumMember]Request = 3,
		}

		#endregion
	
		#region CheckEmail

		public enum CheckEmailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ServiceLevel

		public enum ServiceLevelEnum
		{
			[EnumMember]Gold = 1,
			[EnumMember]Silver = 2,
			[EnumMember]Bronze = 3,
		}

		#endregion
	
		#region CustomerContacted

		public enum CustomerContactedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Satisfaction

		public enum SatisfactionEnum
		{
			[EnumMember]VerySatisfied = 5,
			[EnumMember]Satisfied = 4,
			[EnumMember]Neutral = 3,
			[EnumMember]Dissatisfied = 2,
			[EnumMember]VeryDissatisfied = 1,
		}

		#endregion
	
		#region DecrementEntitlementTerms

		public enum DecrementEntitlementTermsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region FirstResponseSent

		public enum FirstResponseSentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region FirstResponseSLAStatus

		public enum FirstResponseSLAStatusEnum
		{
			[EnumMember]InProgress = 1,
			[EnumMember]NearingNoncompliance = 2,
			[EnumMember]Succeeded = 3,
			[EnumMember]Noncompliant = 4,
		}

		#endregion
	
		#region FollowupTaskCreated

		public enum FollowupTaskCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CaseStage

		public enum CaseStageEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region CustomerEffort

		public enum CustomerEffortEnum
		{
			[EnumMember]Low = 121590000,
			[EnumMember]Medium = 121590001,
			[EnumMember]High = 121590002,
		}

		#endregion
	
		#region UpSellReferral

		public enum UpSellReferralEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Decrementing

		public enum DecrementingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsEscalated

		public enum IsEscalatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region InternalUseOnly

		public enum InternalUseOnlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReceivedAs

		public enum ReceivedAsEnum
		{
			[EnumMember]PublicMessage = 0,
			[EnumMember]PrivateMessage = 1,
		}

		#endregion
	
		#region Priority

		public enum PriorityEnum
		{
			[EnumMember]High = 1,
			[EnumMember]Normal = 2,
			[EnumMember]Low = 3,
		}

		#endregion
	
		#region ResolveBySLAStatus

		public enum ResolveBySLAStatusEnum
		{
			[EnumMember]InProgress = 1,
			[EnumMember]NearingNoncompliance = 2,
			[EnumMember]Succeeded = 3,
			[EnumMember]Noncompliant = 4,
		}

		#endregion
	
		#region RouteCase

		public enum RouteCaseEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ServiceStage

		public enum ServiceStageEnum
		{
			[EnumMember]Identify = 0,
			[EnumMember]Research = 1,
			[EnumMember]Resolve = 2,
		}

		#endregion
	
		#region Severity

		public enum SeverityEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Resolved = 1,
			[EnumMember]Cancelled = 2,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]ProblemSolved = 5,
			[EnumMember]InformationProvided = 1000,
			[EnumMember]Cancelled = 6,
			[EnumMember]Merged = 2000,
			[EnumMember]InProgress = 1,
			[EnumMember]OnHold = 2,
			[EnumMember]WaitingforDetails = 3,
			[EnumMember]Researching = 4,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivitiesComplete = "activitiescomplete";
				public const string BlockedProfile = "blockedprofile";
				public const string Origin = "caseorigincode";
				public const string CaseType = "casetypecode";
				public const string CheckEmail = "checkemail";
				public const string ServiceLevel = "contractservicelevelcode";
				public const string CustomerContacted = "customercontacted";
				public const string Satisfaction = "customersatisfactioncode";
				public const string DecrementEntitlementTerms = "decremententitlementterm";
				public const string FirstResponseSent = "firstresponsesent";
				public const string FirstResponseSLAStatus = "firstresponseslastatus";
				public const string FollowupTaskCreated = "followuptaskcreated";
				public const string CaseStage = "incidentstagecode";
				public const string CustomerEffort = "int_customereffort";
				public const string UpSellReferral = "int_upsellreferral";
				public const string Decrementing = "isdecrementing";
				public const string IsEscalated = "isescalated";
				public const string InternalUseOnly = "merged";
				public const string ReceivedAs = "messagetypecode";
				public const string Priority = "prioritycode";
				public const string ResolveBySLAStatus = "resolvebyslastatus";
				public const string RouteCase = "routecase";
				public const string ServiceStage = "servicestage";
				public const string Severity = "severitycode";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivitiesComplete 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivitiesComplete), label, languageCode);
					}
				}

				public static class BlockedProfile 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(BlockedProfile), label, languageCode);
					}
				}

				public static class Origin 
				{
					public const string Phone_1033 = "Phone";
					public const string Email_1033 = "Email";
					public const string Web_1033 = "Web";
					public const string Facebook_1033 = "Facebook";
					public const string Twitter_1033 = "Twitter";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Origin), label, languageCode);
					}
				}

				public static class CaseType 
				{
					public const string Question_1033 = "Question";
					public const string Problem_1033 = "Problem";
					public const string Request_1033 = "Request";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CaseType), label, languageCode);
					}
				}

				public static class CheckEmail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CheckEmail), label, languageCode);
					}
				}

				public static class ServiceLevel 
				{
					public const string Gold_1033 = "Gold";
					public const string Silver_1033 = "Silver";
					public const string Bronze_1033 = "Bronze";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ServiceLevel), label, languageCode);
					}
				}

				public static class CustomerContacted 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerContacted), label, languageCode);
					}
				}

				public static class Satisfaction 
				{
					public const string VerySatisfied_1033 = "Very Satisfied";
					public const string Satisfied_1033 = "Satisfied";
					public const string Neutral_1033 = "Neutral";
					public const string Dissatisfied_1033 = "Dissatisfied";
					public const string VeryDissatisfied_1033 = "Very Dissatisfied";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Satisfaction), label, languageCode);
					}
				}

				public static class DecrementEntitlementTerms 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DecrementEntitlementTerms), label, languageCode);
					}
				}

				public static class FirstResponseSent 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FirstResponseSent), label, languageCode);
					}
				}

				public static class FirstResponseSLAStatus 
				{
					public const string InProgress_1033 = "In Progress";
					public const string NearingNoncompliance_1033 = "Nearing Noncompliance";
					public const string Succeeded_1033 = "Succeeded";
					public const string Noncompliant_1033 = "Noncompliant";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FirstResponseSLAStatus), label, languageCode);
					}
				}

				public static class FollowupTaskCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(FollowupTaskCreated), label, languageCode);
					}
				}

				public static class CaseStage 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CaseStage), label, languageCode);
					}
				}

				public static class CustomerEffort 
				{
					public const string Low_1033 = "Low";
					public const string Medium_1033 = "Medium";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CustomerEffort), label, languageCode);
					}
				}

				public static class UpSellReferral 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(UpSellReferral), label, languageCode);
					}
				}

				public static class Decrementing 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Decrementing), label, languageCode);
					}
				}

				public static class IsEscalated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsEscalated), label, languageCode);
					}
				}

				public static class InternalUseOnly 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(InternalUseOnly), label, languageCode);
					}
				}

				public static class ReceivedAs 
				{
					public const string PublicMessage_1033 = "Public Message";
					public const string PrivateMessage_1033 = "Private Message";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ReceivedAs), label, languageCode);
					}
				}

				public static class Priority 
				{
					public const string High_1033 = "High";
					public const string Normal_1033 = "Normal";
					public const string Low_1033 = "Low";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Priority), label, languageCode);
					}
				}

				public static class ResolveBySLAStatus 
				{
					public const string InProgress_1033 = "In Progress";
					public const string NearingNoncompliance_1033 = "Nearing Noncompliance";
					public const string Succeeded_1033 = "Succeeded";
					public const string Noncompliant_1033 = "Noncompliant";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ResolveBySLAStatus), label, languageCode);
					}
				}

				public static class RouteCase 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RouteCase), label, languageCode);
					}
				}

				public static class ServiceStage 
				{
					public const string Identify_1033 = "Identify";
					public const string Research_1033 = "Research";
					public const string Resolve_1033 = "Resolve";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ServiceStage), label, languageCode);
					}
				}

				public static class Severity 
				{
					public const string DefaultValue_1033 = "Default Value";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Severity), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Resolved_1033 = "Resolved";
					public const string Cancelled_1033 = "Cancelled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string ProblemSolved_1033 = "Problem Solved";
					public const string InformationProvided_1033 = "Information Provided";
					public const string Cancelled_1033 = "Cancelled";
					public const string Merged_1033 = "Merged";
					public const string InProgress_1033 = "In Progress";
					public const string OnHold_1033 = "On Hold";
					public const string WaitingforDetails_1033 = "Waiting for Details";
					public const string Researching_1033 = "Researching";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Account = "accountid";
			public const string ActivitiesComplete = "activitiescomplete";
			public const string ActualServiceUnits = "actualserviceunits";
			public const string BilledServiceUnits = "billedserviceunits";
			public const string BlockedProfile = "blockedprofile";
			public const string Origin = "caseorigincode";
			public const string CaseType = "casetypecode";
			public const string CheckEmail = "checkemail";
			public const string Contact_ContactId = "contactid";
			public const string ContractLine = "contractdetailid";
			public const string Contract = "contractid";
			public const string ServiceLevel = "contractservicelevelcode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string CustomerContacted = "customercontacted";
			public const string Customer = "customerid";
			public const string Satisfaction = "customersatisfactioncode";
			public const string DecrementEntitlementTerms = "decremententitlementterm";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string Entitlement = "entitlementid";
			public const string EntityImageId = "entityimageid";
			public const string EscalatedOn = "escalatedon";
			public const string ExchangeRate = "exchangerate";
			public const string ExistingCase = "existingcase";
			public const string FirstResponseByKPI = "firstresponsebykpiid";
			public const string FirstResponseSent = "firstresponsesent";
			public const string FirstResponseSLAStatus = "firstresponseslastatus";
			public const string FollowUpBy = "followupby";
			public const string FollowupTaskCreated = "followuptaskcreated";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string CaseId = "incidentid";
			public const string CaseStage = "incidentstagecode";
			public const string InfluenceScore = "influencescore";
			public const string CustomerEffort = "int_customereffort";
			public const string UpSellReferral = "int_upsellreferral";
			public const string Decrementing = "isdecrementing";
			public const string IsEscalated = "isescalated";
			public const string KnowledgeBaseArticle = "kbarticleid";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string MasterCase = "masterid";
			public const string InternalUseOnly = "merged";
			public const string ReceivedAs = "messagetypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string IncidentType = "msdyn_incidenttype";
			public const string IoTAlert = "msdyn_iotalert";
			public const string ChildCases = "numberofchildincidents";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCase = "parentcaseid";
			public const string Contact_PrimaryContactId = "primarycontactid";
			public const string Priority = "prioritycode";
			public const string ProcessId = "processid";
			public const string Product = "productid";
			public const string SerialNumber = "productserialnumber";
			public const string ResolveBy = "resolveby";
			public const string ResolveByKPI = "resolvebykpiid";
			public const string ResolveBySLAStatus = "resolvebyslastatus";
			public const string FirstResponseBy = "responseby";
			public const string ResponsibleContact = "responsiblecontactid";
			public const string RouteCase = "routecase";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceStage = "servicestage";
			public const string Severity = "severitycode";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SocialProfile = "socialprofileid";
			public const string __DeprecatedStageId = "stageid";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string Subject = "subjectid";
			public const string CaseNumber = "ticketnumber";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string CaseTitle = "title";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string Account = "AccountId";
				public const string ActivitiesComplete = "ActivitiesComplete";
				public const string ActualServiceUnits = "ActualServiceUnits";
				public const string BilledServiceUnits = "BilledServiceUnits";
				public const string BlockedProfile = "BlockedProfile";
				public const string Origin = "CaseOriginCode";
				public const string CaseType = "CaseTypeCode";
				public const string CheckEmail = "CheckEmail";
				public const string Contact_ContactId = "ContactId";
				public const string ContractLine = "ContractDetailId";
				public const string Contract = "ContractId";
				public const string ServiceLevel = "ContractServiceLevelCode";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedByExternalParty = "CreatedByExternalParty";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string CustomerContacted = "CustomerContacted";
				public const string Customer = "CustomerId";
				public const string Satisfaction = "CustomerSatisfactionCode";
				public const string DecrementEntitlementTerms = "DecrementEntitlementTerm";
				public const string Description = "Description";
				public const string EmailAddress = "EmailAddress";
				public const string Entitlement = "EntitlementId";
				public const string EntityImageId = "EntityImageId";
				public const string EscalatedOn = "EscalatedOn";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExistingCase = "ExistingCase";
				public const string FirstResponseByKPI = "FirstResponseByKPIId";
				public const string FirstResponseSent = "FirstResponseSent";
				public const string FirstResponseSLAStatus = "FirstResponseSLAStatus";
				public const string FollowUpBy = "FollowupBy";
				public const string FollowupTaskCreated = "FollowUpTaskCreated";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string CaseId = "IncidentId";
				public const string CaseStage = "IncidentStageCode";
				public const string InfluenceScore = "InfluenceScore";
				public const string CustomerEffort = "int_CustomerEffort";
				public const string UpSellReferral = "int_UpSellReferral";
				public const string Decrementing = "IsDecrementing";
				public const string IsEscalated = "IsEscalated";
				public const string KnowledgeBaseArticle = "KbArticleId";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string MasterCase = "MasterId";
				public const string InternalUseOnly = "Merged";
				public const string ReceivedAs = "MessageTypeCode";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedByExternalParty = "ModifiedByExternalParty";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string IncidentType = "msdyn_IncidentType";
				public const string IoTAlert = "msdyn_iotalert";
				public const string ChildCases = "NumberOfChildIncidents";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string ParentCase = "ParentCaseId";
				public const string Contact_PrimaryContactId = "PrimaryContactId";
				public const string Priority = "PriorityCode";
				public const string ProcessId = "ProcessId";
				public const string Product = "ProductId";
				public const string SerialNumber = "ProductSerialNumber";
				public const string ResolveBy = "ResolveBy";
				public const string ResolveByKPI = "ResolveByKPIId";
				public const string ResolveBySLAStatus = "ResolveBySLAStatus";
				public const string FirstResponseBy = "ResponseBy";
				public const string ResponsibleContact = "ResponsibleContactId";
				public const string RouteCase = "RouteCase";
				public const string SentimentValue = "SentimentValue";
				public const string ServiceStage = "ServiceStage";
				public const string Severity = "SeverityCode";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SocialProfile = "SocialProfileId";
				public const string __DeprecatedStageId = "StageId";
				public const string Status = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string Subject = "SubjectId";
				public const string CaseNumber = "TicketNumber";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string CaseTitle = "Title";
				public const string Currency = "TransactionCurrencyId";
				public const string __DeprecatedTraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Account
				{
					public const string _1033 = "Account";
				}

				public static class ActivitiesComplete
				{
					public const string _1033 = "Activities Complete";
				}

				public static class ActualServiceUnits
				{
					public const string _1033 = "Actual Service Units";
				}

				public static class BilledServiceUnits
				{
					public const string _1033 = "Billed Service Units";
				}

				public static class BlockedProfile
				{
					public const string _1033 = "Blocked Profile";
				}

				public static class Origin
				{
					public const string _1033 = "Origin";
				}

				public static class CaseType
				{
					public const string _1033 = "Case Type";
				}

				public static class CheckEmail
				{
					public const string _1033 = "Check Email";
				}

				public static class Contact_ContactId
				{
					public const string _1033 = "Contact";
				}

				public static class ContractLine
				{
					public const string _1033 = "Contract Line";
				}

				public static class Contract
				{
					public const string _1033 = "Contract";
				}

				public static class ServiceLevel
				{
					public const string _1033 = "Service Level";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedByExternalParty
				{
					public const string _1033 = "Created By (External Party)";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class CustomerContacted
				{
					public const string _1033 = "Customer Contacted";
				}

				public static class Customer
				{
					public const string _1033 = "Customer";
				}

				public static class Satisfaction
				{
					public const string _1033 = "Satisfaction";
				}

				public static class DecrementEntitlementTerms
				{
					public const string _1033 = "Decrement Entitlement Terms";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class EmailAddress
				{
					public const string _1033 = "Email Address";
				}

				public static class Entitlement
				{
					public const string _1033 = "Entitlement";
				}

				public static class EntityImageId
				{
				}

				public static class EscalatedOn
				{
					public const string _1033 = "Escalated On";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ExistingCase
				{
					public const string _1033 = "Existing Case";
				}

				public static class FirstResponseByKPI
				{
					public const string _1033 = "First Response By KPI";
				}

				public static class FirstResponseSent
				{
					public const string _1033 = "First Response Sent";
				}

				public static class FirstResponseSLAStatus
				{
					public const string _1033 = "First Response SLA Status";
				}

				public static class FollowUpBy
				{
					public const string _1033 = "Follow Up By";
				}

				public static class FollowupTaskCreated
				{
					public const string _1033 = "Follow up Task Created";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class CaseId
				{
					public const string _1033 = "Case";
				}

				public static class CaseStage
				{
					public const string _1033 = "Case Stage";
				}

				public static class InfluenceScore
				{
					public const string _1033 = "Influence Score";
				}

				public static class CustomerEffort
				{
					public const string _1033 = "Customer Effort";
				}

				public static class UpSellReferral
				{
					public const string _1033 = "UpSell Referral";
				}

				public static class Decrementing
				{
					public const string _1033 = "Decrementing";
				}

				public static class IsEscalated
				{
					public const string _1033 = "Is Escalated";
				}

				public static class KnowledgeBaseArticle
				{
					public const string _1033 = "Knowledge Base Article";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class MasterCase
				{
					public const string _1033 = "Master Case";
				}

				public static class InternalUseOnly
				{
					public const string _1033 = "Internal Use Only";
				}

				public static class ReceivedAs
				{
					public const string _1033 = "Received As";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedByExternalParty
				{
					public const string _1033 = "Modified By (External Party)";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class IncidentType
				{
					public const string _1033 = "Incident Type";
				}

				public static class IoTAlert
				{
					public const string _1033 = "IoT Alert";
				}

				public static class ChildCases
				{
					public const string _1033 = "Child Cases";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class ParentCase
				{
					public const string _1033 = "Parent Case";
				}

				public static class Contact_PrimaryContactId
				{
					public const string _1033 = "Contact";
				}

				public static class Priority
				{
					public const string _1033 = "Priority";
				}

				public static class ProcessId
				{
					public const string _1033 = "Process Id";
				}

				public static class Product
				{
					public const string _1033 = "Product";
				}

				public static class SerialNumber
				{
					public const string _1033 = "Serial Number";
				}

				public static class ResolveBy
				{
					public const string _1033 = "Resolve By";
				}

				public static class ResolveByKPI
				{
					public const string _1033 = "Resolve By KPI";
				}

				public static class ResolveBySLAStatus
				{
					public const string _1033 = "Resolve By SLA Status";
				}

				public static class FirstResponseBy
				{
					public const string _1033 = "First Response By";
				}

				public static class ResponsibleContact
				{
					public const string _1033 = "Responsible Contact";
				}

				public static class RouteCase
				{
					public const string _1033 = "Route Case";
				}

				public static class SentimentValue
				{
					public const string _1033 = "Sentiment Value";
				}

				public static class ServiceStage
				{
					public const string _1033 = "Service Stage";
				}

				public static class Severity
				{
					public const string _1033 = "Severity";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SocialProfile
				{
					public const string _1033 = "Social Profile";
				}

				public static class __DeprecatedStageId
				{
					public const string _1033 = "(Deprecated) Stage Id";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class Subject
				{
					public const string _1033 = "Subject";
				}

				public static class CaseNumber
				{
					public const string _1033 = "Case Number";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class CaseTitle
				{
					public const string _1033 = "Case Title";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class __DeprecatedTraversedPath
				{
					public const string _1033 = "(Deprecated) Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfParty = "incident_activity_parties";
				public const string CasesOfExistingCase = "incident_existingcase";
				public const string CasesOfMasterCase = "incident_master_incident";
				public const string CasesOfParentCase = "incident_parent_incident";
			}
			
			public static class NToOne
			{
				public const string ContactAsContact = "contact_as_primary_contact";
				public const string ContactAsResponsibleContact = "contact_as_responsible_contact";
				public const string AccountAsCustomer = "incident_customer_accounts";
				public const string ContactAsCustomer = "incident_customer_contacts";
				public const string CaseAsExistingCase = "incident_existingcase";
				public const string CaseAsMasterCase = "incident_master_incident";
				public const string CaseAsParentCase = "incident_parent_incident";

				public static class Lookups
				{
					public const string ContactAsContact = "primarycontactid";
					public const string ContactAsResponsibleContact = "responsiblecontactid";
					public const string AccountAsCustomer = "customerid";
					public const string ContactAsCustomer = "customerid";
					public const string CaseAsExistingCase = "existingcase";
					public const string CaseAsMasterCase = "masterid";
					public const string CaseAsParentCase = "parentcaseid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#region CaseContract contract

	[DataContract, CrmEntityMapping("incident", "Incident", "Case")]
	public partial class CaseContract : EntityContract
	{
		[DataMember, CrmFieldMapping("incidentid")] public Guid? Id;

		#region Relationships


		#endregion
	}

	#endregion

	#region CaseContract labels

    [DataContract]
    public class CaseContractLabels
    {
        [DataMember] public string EntityLabel = "Case";

		#region Attributes keyed labels

 
		#endregion

		#region Enums keyed labels


		#endregion
    }

	#endregion

	#endregion

	#endregion

}

